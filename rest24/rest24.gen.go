// Package rest24 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest24

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TfsoScopes = "tfso.Scopes"
)

// Defines values for BadRequestErrorErrorName.
const (
	BadRequestErrorErrorNameBadRequestError BadRequestErrorErrorName = "BadRequestError"
)

// Defines values for BadRequestErrorErrorPayloadErrorsType.
const (
	DepartmentMissing BadRequestErrorErrorPayloadErrorsType = "DepartmentMissing"
	NoLines           BadRequestErrorErrorPayloadErrorsType = "NoLines"
	ProjectMissing    BadRequestErrorErrorPayloadErrorsType = "ProjectMissing"
)

// Defines values for BankAccountTypeEnum.
const (
	Bban BankAccountTypeEnum = "bban"
	Iban BankAccountTypeEnum = "iban"
)

// Defines values for BankTransactionResponseStatus.
const (
	Closed  BankTransactionResponseStatus = "closed"
	Created BankTransactionResponseStatus = "created"
)

// Defines values for BankTransactionTypeEnum.
const (
	Inbound  BankTransactionTypeEnum = "inbound"
	Outbound BankTransactionTypeEnum = "outbound"
)

// Defines values for ClientStateType.
const (
	ClientStateTypeActive   ClientStateType = "Active"
	ClientStateTypeInactive ClientStateType = "Inactive"
	ClientStateTypeUnknown  ClientStateType = "Unknown"
)

// Defines values for CommunicationStatusType.
const (
	CommunicationStatusTypeConfirmed   CommunicationStatusType = "Confirmed"
	CommunicationStatusTypeUnconfirmed CommunicationStatusType = "Unconfirmed"
)

// Defines values for CustomerPostRequest0IsCompany.
const (
	True CustomerPostRequest0IsCompany = true
)

// Defines values for CustomerPostRequest1IsCompany.
const (
	False CustomerPostRequest1IsCompany = false
)

// Defines values for LineTypeEnum.
const (
	LineTypeEnumProduct LineTypeEnum = "product"
	LineTypeEnumText    LineTypeEnum = "text"
)

// Defines values for PaymenReferenceTypeEnum.
const (
	PaymenReferenceTypeEnumInvoiceRef PaymenReferenceTypeEnum = "invoiceRef"
	PaymenReferenceTypeEnumOcr        PaymenReferenceTypeEnum = "ocr"
	PaymenReferenceTypeEnumText       PaymenReferenceTypeEnum = "text"
)

// Defines values for ProductStatusEnum.
const (
	ProductStatusEnumActive   ProductStatusEnum = "active"
	ProductStatusEnumInactive ProductStatusEnum = "inactive"
)

// Defines values for ProductTypeEnum.
const (
	Default   ProductTypeEnum = "default"
	Structure ProductTypeEnum = "structure"
)

// Defines values for SalesOrderStatusEnum.
const (
	SalesOrderStatusEnumAdvanceInvoice SalesOrderStatusEnum = "AdvanceInvoice"
	SalesOrderStatusEnumConfirmed      SalesOrderStatusEnum = "Confirmed"
	SalesOrderStatusEnumDraft          SalesOrderStatusEnum = "Draft"
	SalesOrderStatusEnumInvoice        SalesOrderStatusEnum = "Invoice"
	SalesOrderStatusEnumProposal       SalesOrderStatusEnum = "Proposal"
)

// Defines values for TfsoApiOrganizationModelsUserType.
const (
	Basic        TfsoApiOrganizationModelsUserType = "Basic"
	Client       TfsoApiOrganizationModelsUserType = "Client"
	External     TfsoApiOrganizationModelsUserType = "External"
	Organization TfsoApiOrganizationModelsUserType = "Organization"
)

// Defines values for Type.
const (
	Date   Type = "Date"
	Period Type = "Period"
)

// Defines values for ValidationErrorErrorName.
const (
	ValidationErrorErrorNameValidationError ValidationErrorErrorName = "ValidationError"
)

// Account Information about the account for which the balances belong to.
type Account struct {
	// Id A unique identifier for the account within 24SevenOffice accounting module.
	Id *int `json:"id,omitempty"`

	// Name The human-readable name that describes the purpose or nature of the account.
	Name *string `json:"name,omitempty"`

	// Number The unique number that indicates which type of account it belongs to.
	Number *int `json:"number,omitempty"`
}

// AddressBasic defines model for AddressBasic.
type AddressBasic struct {
	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode"`

	// Street The street for the address. Can contain a street name, building and apartment number, a PO box number, or similar.
	Street *string `json:"street"`
}

// AddressModel The address of the organization.
type AddressModel struct {
	// City The city for the address.
	City *string `json:"city"`

	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode"`

	// Street The street for the address. Can contain a street name, building and apartment number, a PO box number, or similar.
	Street *string `json:"street"`
}

// AddressesDto Addresses for the customer.
type AddressesDto struct {
	// Billing The billing address of the customer.
	Billing *BillingAddress `json:"billing,omitempty"`

	// Delivery The delivery address of the customer.
	Delivery *DeliveryAddress `json:"delivery,omitempty"`

	// Postal The postal address of the customer.
	Postal *PostalAddress `json:"postal,omitempty"`

	// Visit The visiting address of the customer.
	Visit *VisitAddress `json:"visit,omitempty"`
}

// AggregationElement defines model for AggregationElement.
type AggregationElement struct {
	// Account Information about the account for which the balances belong to.
	Account *Account `json:"account,omitempty"`

	// Balances The monthly change in balance for an account during a specific period.
	Balances *[]AmountElement `json:"balances,omitempty"`
}

// AmountElement defines model for AmountElement.
type AmountElement struct {
	// Change The change in balance for the account during the specified period.
	Change *float32 `json:"change,omitempty"`

	// Closing The closing balance of the account for the specified period.
	Closing *float32 `json:"closing,omitempty"`

	// Date The date corresponding to the balance change.
	Date *openapi_types.Date `json:"date,omitempty"`

	// Opening The opening balance of the account for the specified period.
	Opening *float32 `json:"opening,omitempty"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError struct {
	// Error Bad request error details.
	Error *struct {
		// Name The name for the error.
		Name *BadRequestErrorErrorName `json:"name,omitempty"`

		// Payload The payload for the bad request error.
		Payload *struct {
			// Errors A list of errors.
			Errors *[]struct {
				// Arguments Arguments for the error message.
				Arguments *[]string `json:"arguments,omitempty"`

				// Message An error message.
				Message *string `json:"message,omitempty"`

				// Type The type of the error.
				Type *BadRequestErrorErrorPayloadErrorsType `json:"type,omitempty"`
			} `json:"errors,omitempty"`
		} `json:"payload,omitempty"`
	} `json:"error,omitempty"`

	// TrackingId A tracking identifier for the bad request error.
	TrackingId *string `json:"trackingId,omitempty"`
}

// BadRequestErrorErrorName The name for the error.
type BadRequestErrorErrorName string

// BadRequestErrorErrorPayloadErrorsType The type of the error.
type BadRequestErrorErrorPayloadErrorsType string

// BankAccountBalance The balance of the bank account. The whole balance object is omitted if no balance is available.
type BankAccountBalance struct {
	// Amount The amount of the balance.
	Amount *float32 `json:"amount,omitempty"`

	// Currency The currency of the balance.
	Currency *struct {
		// Code The currency code of the balance.
		Code string `json:"code"`
	} `json:"currency,omitempty"`

	// Timestamp The timestamp of the balance.
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// BankAccountBalanceRequestPost The balance of the bank account. The whole balance object is omitted if no balance is available.
type BankAccountBalanceRequestPost = BankAccountBalance

// BankAccountBalanceResponse The balance of the bank account. The whole balance object is omitted if no balance is available.
type BankAccountBalanceResponse = BankAccountBalance

// BankAccountBase Base bank account object
type BankAccountBase struct {
	// Bic The Business Identifier Codes (BIC) for the bank that manages the bank account.
	Bic *string `json:"bic,omitempty"`

	// LedgerAccount The ledger account within the 24SevenOffice accounting module that corresponds to this bank account. Accounts can be retrieved from the separate /accounts endpoint.
	LedgerAccount *struct {
		// Number The unique number that indicates which type of account it belongs to.
		Number int `json:"number"`
	} `json:"ledgerAccount,omitempty"`

	// Name A user-defined name of the bank account, as it is shown in 24SevenOffice.
	Name *string `json:"name,omitempty"`

	// Number The account number of the bank account.
	Number *string `json:"number,omitempty"`

	// Owner Details for the bank account owner.
	Owner *struct {
		// Contact Details for the contact person for the bank account owner.
		Contact struct {
			// Email The email of the contact person.
			Email openapi_types.Email `json:"email"`

			// Name The name of the contact person.
			Name string `json:"name"`
		} `json:"contact"`

		// Name The company name of the bank account owner.
		Name string `json:"name"`

		// OrganizationNumber The organization number of the bank account owner.
		OrganizationNumber string `json:"organizationNumber"`
	} `json:"owner,omitempty"`

	// TransactionType The transaction type within the 24SevenOffice accounting module, used when posting bank transactions in the 24SevenOffice bank module. Transaction types can be retrieved from the separate /transactiontypes endpoint.
	TransactionType *struct {
		// Number A unique number representing the transaction type.
		Number int `json:"number"`
	} `json:"transactionType,omitempty"`

	// Type Type of the originating bank account for outbound transactions.
	Type *BankAccountTypeEnum `json:"type"`
}

// BankAccountExternal The originating bank account for transactions. This is automatically set for outbound transactions i.e. the property is always returned in the API responses for outbound transactions.
type BankAccountExternal struct {
	// Number Number of the originating bank account for outbound transactions.
	Number *string `json:"number"`

	// Type Type of the originating bank account for outbound transactions.
	Type *BankAccountTypeEnum `json:"type"`
}

// BankAccountRequestPost Base bank account object
type BankAccountRequestPost = BankAccountBase

// BankAccountResponse defines model for BankAccountResponse.
type BankAccountResponse struct {
	// Balance The balance of the bank account. The whole balance object is omitted if no balance is available.
	Balance *BankAccountBalance `json:"balance,omitempty"`

	// Bic The Business Identifier Codes (BIC) for the bank that manages the bank account.
	Bic *string `json:"bic,omitempty"`

	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id A unique identifier for the bank account within 24SevenOffice.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// LedgerAccount The ledger account within the 24SevenOffice accounting module that corresponds to this bank account. Accounts can be retrieved from the separate /accounts endpoint.
	LedgerAccount *struct {
		// Number The unique number that indicates which type of account it belongs to.
		Number int `json:"number"`
	} `json:"ledgerAccount,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format. The Bank Account Balance changes are not included here, as these are defined by a separate "timestamp" property for the `balance` object.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// Name A user-defined name of the bank account, as it is shown in 24SevenOffice.
	Name *string `json:"name,omitempty"`

	// Number The account number of the bank account.
	Number *string `json:"number,omitempty"`

	// Owner Details for the bank account owner.
	Owner *struct {
		// Contact Details for the contact person for the bank account owner.
		Contact struct {
			// Email The email of the contact person.
			Email openapi_types.Email `json:"email"`

			// Name The name of the contact person.
			Name string `json:"name"`
		} `json:"contact"`

		// Name The company name of the bank account owner.
		Name string `json:"name"`

		// OrganizationNumber The organization number of the bank account owner.
		OrganizationNumber string `json:"organizationNumber"`
	} `json:"owner,omitempty"`

	// TransactionType The transaction type within the 24SevenOffice accounting module, used when posting bank transactions in the 24SevenOffice bank module. Transaction types can be retrieved from the separate /transactiontypes endpoint.
	TransactionType *struct {
		// Number A unique number representing the transaction type.
		Number int `json:"number"`
	} `json:"transactionType,omitempty"`

	// Type Type of the originating bank account for outbound transactions.
	Type *BankAccountTypeEnum `json:"type"`
}

// BankAccountTypeEnum Type of the originating bank account for outbound transactions.
type BankAccountTypeEnum string

// BankTransactionAmountCurrencyResponse The currency of the balance.
type BankTransactionAmountCurrencyResponse struct {
	// Code The currency code of the balance.
	Code string `json:"code"`
}

// BankTransactionAmountResponse Amount of the bank transaction.
type BankTransactionAmountResponse struct {
	// Currency The currency of the balance.
	Currency BankTransactionAmountCurrencyResponse `json:"currency"`

	// Value The amount in the currency specified. Must be a positive number.
	Value float32 `json:"value"`
}

// BankTransactionBankAccountResponse Details of the bank account involved in the transaction.
type BankTransactionBankAccountResponse struct {
	// Id A unique identifier for the bank account within 24SevenOffice.
	Id string `json:"id"`
}

// BankTransactionBase Base fields of bank transactions.
type BankTransactionBase struct {
	// Amount Amount of the bank transaction.
	Amount *BankTransactionAmountResponse `json:"amount,omitempty"`

	// BankAccount Details of the bank account involved in the transaction.
	BankAccount *BankTransactionBankAccountResponse `json:"bankAccount,omitempty"`

	// BankTransactionCode The bank transaction code is a structured code that identifies the type of a transaction. The code is structured in three levels: domain family and subfamily.
	// * The domain code is the highest level and is used to group the transaction codes into different domains.
	// * The family code is used to group the transaction codes within a domain.
	// * The subfamily code is used to group the transaction codes within a family.
	BankTransactionCode *BankTransactionCodesResponse `json:"bankTransactionCode,omitempty"`

	// BankTransactionReference Unique identifier for the bank transaction supplied by the bank that manages the bank account. It must be globally unique across all bank accounts for the client. A duplication warning is returned if this is not the case.
	BankTransactionReference *string `json:"bankTransactionReference,omitempty"`

	// Date Date of the transaction.
	Date *string `json:"date,omitempty"`

	// FromBankAccount The originating bank account for transactions. This is automatically set for outbound transactions i.e. the property is always returned in the API responses for outbound transactions.
	FromBankAccount *BankAccountExternal `json:"fromBankAccount,omitempty"`

	// PaymentReference The payment reference must be one of the following types: text ocr invoiceRef.
	// * `text`: The value is a free text reference.
	// * `ocr`: The value is an structured OCR reference. KID number in Norway.
	// * `invoiceRef`: The value is an invoice number.
	//
	// The actual value of the reference is set in the `value` property.
	PaymentReference *PaymenReferenceDto `json:"paymentReference,omitempty"`

	// ToBankAccount The originating bank account for transactions. This is automatically set for outbound transactions i.e. the property is always returned in the API responses for outbound transactions.
	ToBankAccount *BankAccountExternal `json:"toBankAccount,omitempty"`

	// Type Direction of the payment. "Inbound" stands for an incoming payment. E.g. a payment of an invoice by a customer. "Outbound" is a payment originating from this bank account. E.g a debet card transaction, when paid for goods and services.
	Type *BankTransactionTypeEnum `json:"type,omitempty"`
}

// BankTransactionCodesResponse The bank transaction code is a structured code that identifies the type of a transaction. The code is structured in three levels: domain family and subfamily.
// * The domain code is the highest level and is used to group the transaction codes into different domains.
// * The family code is used to group the transaction codes within a domain.
// * The subfamily code is used to group the transaction codes within a family.
type BankTransactionCodesResponse struct {
	// DomainCode Domain code of the bank transaction.
	DomainCode *string `json:"domainCode"`

	// FamilyCode Family code of the bank transaction.
	FamilyCode *string `json:"familyCode"`

	// SubFamilyCode Subfamily code of the bank transaction.
	SubFamilyCode *string `json:"subFamilyCode"`
}

// BankTransactionRequestPost Base fields of bank transactions.
type BankTransactionRequestPost = BankTransactionBase

// BankTransactionResponse defines model for BankTransactionResponse.
type BankTransactionResponse struct {
	// Amount Amount of the bank transaction.
	Amount *BankTransactionAmountResponse `json:"amount,omitempty"`

	// BankAccount Details of the bank account involved in the transaction.
	BankAccount *BankTransactionBankAccountResponse `json:"bankAccount,omitempty"`

	// BankTransactionCode The bank transaction code is a structured code that identifies the type of a transaction. The code is structured in three levels: domain family and subfamily.
	// * The domain code is the highest level and is used to group the transaction codes into different domains.
	// * The family code is used to group the transaction codes within a domain.
	// * The subfamily code is used to group the transaction codes within a family.
	BankTransactionCode *BankTransactionCodesResponse `json:"bankTransactionCode,omitempty"`

	// BankTransactionReference Unique identifier for the bank transaction supplied by the bank that manages the bank account. It must be globally unique across all bank accounts for the client. A duplication warning is returned if this is not the case.
	BankTransactionReference *string `json:"bankTransactionReference,omitempty"`

	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Date Date of the transaction.
	Date *string `json:"date,omitempty"`

	// FromBankAccount The originating bank account for transactions. This is automatically set for outbound transactions i.e. the property is always returned in the API responses for outbound transactions.
	FromBankAccount *BankAccountExternal `json:"fromBankAccount,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// PaymentReference The payment reference must be one of the following types: text ocr invoiceRef.
	// * `text`: The value is a free text reference.
	// * `ocr`: The value is an structured OCR reference. KID number in Norway.
	// * `invoiceRef`: The value is an invoice number.
	//
	// The actual value of the reference is set in the `value` property.
	PaymentReference *PaymenReferenceDto `json:"paymentReference,omitempty"`

	// Status Status of the bank transaction, controlled by the backend and always returned in the API-responses. Possible values are the following:
	// - `created`: The transaction has been created.
	// - `closed`: The transaction has been closed in the bank reconciliation module.
	Status *BankTransactionResponseStatus `json:"status,omitempty"`

	// ToBankAccount The originating bank account for transactions. This is automatically set for outbound transactions i.e. the property is always returned in the API responses for outbound transactions.
	ToBankAccount *BankAccountExternal `json:"toBankAccount,omitempty"`

	// Type Direction of the payment. "Inbound" stands for an incoming payment. E.g. a payment of an invoice by a customer. "Outbound" is a payment originating from this bank account. E.g a debet card transaction, when paid for goods and services.
	Type *BankTransactionTypeEnum `json:"type,omitempty"`
}

// BankTransactionResponseStatus Status of the bank transaction, controlled by the backend and always returned in the API-responses. Possible values are the following:
// - `created`: The transaction has been created.
// - `closed`: The transaction has been closed in the bank reconciliation module.
type BankTransactionResponseStatus string

// BankTransactionTypeEnum Direction of the payment. "Inbound" stands for an incoming payment. E.g. a payment of an invoice by a customer. "Outbound" is a payment originating from this bank account. E.g a debet card transaction, when paid for goods and services.
type BankTransactionTypeEnum string

// BillingAddress defines model for BillingAddress.
type BillingAddress struct {
	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision"`

	// Name The name for the address.
	Name *string `json:"name"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode"`

	// Street The street for the address. Can contain a street name, building and apartment number, a PO box number, or similar.
	Street *string `json:"street"`
}

// Categories List of product categories
type Categories = []CategoryResponse

// CategoryBase Category base fields
type CategoryBase struct {
	// AlternativeReference An alternative user-defined reference for the category.
	AlternativeReference *string `json:"alternativeReference,omitempty"`

	// Name The name of the category.
	Name *string `json:"name,omitempty"`

	// ParentId A reference to the ID of the parent category.
	ParentId *float32 `json:"parentId,omitempty"`
}

// CategoryPatchRequest Category base fields
type CategoryPatchRequest = CategoryBase

// CategoryPostRequest Category base fields
type CategoryPostRequest = CategoryBase

// CategoryRequest Information about the category to which the product belongs.
type CategoryRequest struct {
	// Id A reference by ID to the category the product belongs to. Product categories can be retrieved from the separate `/productcategories` endpoint.
	Id *int `json:"id,omitempty"`
}

// CategoryResponse defines model for CategoryResponse.
type CategoryResponse struct {
	// AlternativeReference An alternative user-defined reference for the category.
	AlternativeReference *string `json:"alternativeReference,omitempty"`

	// Id A unique identifier for the product category within 24SevenOffice ERP modules.
	Id *int `json:"id,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *ModifiedAt `json:"modifiedAt,omitempty"`

	// Name The name of the category.
	Name *string `json:"name,omitempty"`

	// ParentId A reference to the ID of the parent category.
	ParentId *float32 `json:"parentId,omitempty"`
}

// CategoryResponseIdAndName Information about the category to which the product belongs.
type CategoryResponseIdAndName struct {
	// Id A reference by ID to the category the product belongs to. Product categories can be retrieved from the separate `/productcategories` endpoint.
	Id *int `json:"id,omitempty"`

	// Name The category that the product belongs to.
	Name *string `json:"name,omitempty"`
}

// ClientContactModel Contact information for the organization.
type ClientContactModel struct {
	// Email The email address for contacting the organization's contact person.
	Email *string `json:"email"`

	// Language The contact person's language setting.
	Language *string `json:"language"`

	// Name The name of the organization's contact person.
	Name *string `json:"name"`

	// Phone The phone number for contacting the organization's contact person.
	Phone *string `json:"phone"`
}

// ClientStateType The state of the organization.
type ClientStateType string

// CommunicationStatusType defines model for CommunicationStatusType.
type CommunicationStatusType string

// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
type CreatedAt = string

// Currencies List of currencies available within the 24SevenOffice accounting module.
type Currencies = []Currency

// Currency defines model for Currency.
type Currency struct {
	// Code The currency code used in transactions within the 24SevenOffice.
	Code *string `json:"code,omitempty"`

	// Rate The exchange rate of the currency.
	Rate *float32 `json:"rate,omitempty"`
}

// CustomerIdOnly Details of a customer used within 24SevenOffice CRM.
type CustomerIdOnly struct {
	// Id A unique identifier for the customer within 24SevenOffice CRM.
	Id *int `json:"id,omitempty"`
}

// Customer Customer details for the sales order. Note that the `customer` object for the `/salesOrders` endpoint is not the same as the customer that can be retrieved from the `/customers` endpoint, even though both share the same ID reference and their schemas are similar. The `customer` object in the context of `/salesOrders` contains the customer details as they were at the time the sales order was created. In contrast, the `/customers` endpoint always provides the latest state values for the customer properties.
type Customer struct {
	// City The city for the address.
	City *string `json:"city,omitempty"`

	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode,omitempty"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision,omitempty"`

	// Gln The Global Location Number (GLN) for the customer.
	Gln *string `json:"gln,omitempty"`

	// Id A unique identifier for the customer within 24SevenOffice CRM.
	Id *int `json:"id,omitempty"`

	// InvoiceEmailAddresses A list of email addresses to which the invoice should be sent.
	InvoiceEmailAddresses *[]openapi_types.Email `json:"invoiceEmailAddresses,omitempty"`

	// Name The customer name as it appears on the sales order and an invoice associated with the sales order.
	Name *string `json:"name,omitempty"`

	// OrganizationNumber The organization number issued by authorities, like a VAT number, of the customer if the customer is a company.
	OrganizationNumber *string `json:"organizationNumber,omitempty"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea,omitempty"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode,omitempty"`
}

// CustomerPatchRequest defines model for CustomerPatchRequest.
type CustomerPatchRequest struct {
	// Address Addresses for the customer.
	Address *AddressesDto `json:"address,omitempty"`

	// Email Email addresses for the customer.
	Email *EmailsDto `json:"email,omitempty"`

	// IsSupplier A flag variable indicating whether the customer is also a supplier (true) or not (false).
	IsSupplier *bool `json:"isSupplier,omitempty"`

	// Name A human-readable name or label for a customer, making it easily identifiable to users.
	Name *string `json:"name"`

	// OrganizationNumber The organization number issued by authorities, like a VAT number, of the customer if the customer is a company.
	OrganizationNumber *string `json:"organizationNumber"`

	// Person Email addresses for the customer.
	Person *FirstnameLastnameDto `json:"person,omitempty"`

	// Phone A phone number for contacting the customer.
	Phone *string `json:"phone"`
}

// CustomerPostRequest defines model for CustomerPostRequest.
type CustomerPostRequest struct {
	// Address Addresses for the customer.
	Address *AddressesDto `json:"address,omitempty"`

	// Email Email addresses for the customer.
	Email *EmailsDto `json:"email,omitempty"`

	// Id A unique identifier for the customer within 24SevenOffice CRM. This ID is used for reference and linking transactions to specific customers.
	Id *float32 `json:"id"`

	// IsSupplier A flag variable indicating whether the customer is also a supplier (true) or not (false).
	IsSupplier *bool `json:"isSupplier,omitempty"`

	// Name A human-readable name or label for a customer, making it easily identifiable to users.
	Name *string `json:"name"`

	// OrganizationNumber The organization number issued by authorities, like a VAT number, of the customer if the customer is a company.
	OrganizationNumber *string `json:"organizationNumber"`

	// Person Email addresses for the customer.
	Person *FirstnameLastnameDto `json:"person,omitempty"`

	// Phone A phone number for contacting the customer.
	Phone *string `json:"phone"`
	union json.RawMessage
}

// CustomerPostRequest0 A new customer is a company.
type CustomerPostRequest0 struct {
	// IsCompany A flag variable indicating whether the customer is a company (true) or a person (false).
	IsCompany CustomerPostRequest0IsCompany `json:"isCompany"`

	// Name A human-readable name or label for a customer, making it easily identifiable to users.
	Name   string  `json:"name"`
	Person *string `json:"person"`
}

// CustomerPostRequest0IsCompany A flag variable indicating whether the customer is a company (true) or a person (false).
type CustomerPostRequest0IsCompany bool

// CustomerPostRequest1 A new customer is a private person.
type CustomerPostRequest1 struct {
	// IsCompany A flag variable indicating whether the customer is a company (true) or a person (false).
	IsCompany          CustomerPostRequest1IsCompany `json:"isCompany"`
	Name               *string                       `json:"name"`
	OrganizationNumber *string                       `json:"organizationNumber"`

	// Person Email addresses for the customer.
	Person FirstnameLastnameDto `json:"person"`
}

// CustomerPostRequest1IsCompany A flag variable indicating whether the customer is a company (true) or a person (false).
type CustomerPostRequest1IsCompany bool

// CustomerProperties defines model for CustomerProperties.
type CustomerProperties struct {
	// Address Addresses for the customer.
	Address *AddressesDto `json:"address,omitempty"`

	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// Email Email addresses for the customer.
	Email *EmailsDto `json:"email,omitempty"`

	// Id A unique identifier for the customer within 24SevenOffice CRM. This ID is used for reference and linking transactions to specific customers.
	Id *int32 `json:"id,omitempty"`

	// IsCompany A flag variable indicating whether the customer is a company (true) or a person (false).
	IsCompany *bool `json:"isCompany,omitempty"`

	// IsSupplier A flag variable indicating whether the customer is also a supplier (true) or not (false).
	IsSupplier *bool `json:"isSupplier,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *ModifiedAt `json:"modifiedAt,omitempty"`

	// Name A human-readable name or label for a customer, making it easily identifiable to users.
	Name *string `json:"name"`

	// OrganizationNumber The organization number issued by authorities, like a VAT number, of the customer if the customer is a company.
	OrganizationNumber *string `json:"organizationNumber"`

	// Person Email addresses for the customer.
	Person *FirstnameLastnameDto `json:"person,omitempty"`

	// Phone A phone number for contacting the customer.
	Phone *string `json:"phone"`
}

// CustomerResponse defines model for CustomerResponse.
type CustomerResponse = CustomerProperties

// DateFrom defines model for DateFrom.
type DateFrom = openapi_types.Date

// DateTo defines model for DateTo.
type DateTo = openapi_types.Date

// DeliveryAddress defines model for DeliveryAddress.
type DeliveryAddress struct {
	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision"`

	// Name The name for the address.
	Name *string `json:"name"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode"`

	// Street The street for the address. Can contain a street name, building and apartment number, a PO box number, or similar.
	Street *string `json:"street"`
}

// DeliveryCustomer Delivery details for the sales order.
type DeliveryCustomer struct {
	// City The city name for the address.
	City *string `json:"city,omitempty"`

	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode,omitempty"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision,omitempty"`

	// Id A unique identifier for the customer within 24SevenOffice CRM.
	Id *int `json:"id,omitempty"`

	// Name A human-readable name or label for a customer, making it easily identifiable to users.
	Name *string `json:"name,omitempty"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea,omitempty"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode,omitempty"`
}

// DimensionDto defines model for DimensionDto.
type DimensionDto struct {
	// DimensionType The unique identifier for the dimension within 24SevenOffice ERP modules.
	DimensionType int `json:"dimensionType"`

	// Name The display name asociated with the value of the dimension.
	Name string `json:"name"`

	// Value The value (ie key) for the dimension.
	Value string `json:"value"`
}

// EmailsDto Email addresses for the customer.
type EmailsDto struct {
	// Billing The billing email address for the customer.
	Billing *string `json:"billing"`

	// Contact The email address for contacting the customer.
	Contact *string `json:"contact"`
}

// FirstnameLastnameDto Email addresses for the customer.
type FirstnameLastnameDto struct {
	// FirstName The first name of a person if the customer is a person.
	FirstName *string `json:"firstName"`

	// LastName The last name of a person if the customer is a person.
	LastName *string `json:"lastName"`
}

// Fiscal defines model for Fiscal.
type Fiscal struct {
	EndingAt     *openapi_types.Date `json:"endingAt,omitempty"`
	StartingDate *openapi_types.Date `json:"startingDate,omitempty"`
}

// IdentifierModel defines model for IdentifierModel.
type IdentifierModel struct {
	// Id The unique identifier for the identifier.
	Id     *openapi_types.UUID      `json:"id,omitempty"`
	Status *CommunicationStatusType `json:"status,omitempty"`

	// Type The type of the identifier.
	Type *string `json:"type"`

	// Value The value of the identifier.
	Value *string `json:"value"`
}

// Invoice Details of an invoice used within 24SevenOffice.
type Invoice struct {
	// DueDate The due date for the invoice.
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// Number The unique number representing the invoice.
	Number *string `json:"number,omitempty"`

	// RemittanceReference The remittance reference for the invoice.
	RemittanceReference *string `json:"remittanceReference,omitempty"`
}

// InvoiceWithTransaction Details of an invoice associated with a sales order.
type InvoiceWithTransaction struct {
	// Date The date when the invoice was issued.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DueDate The due date by which the invoice must be paid.
	DueDate *openapi_types.Date `json:"dueDate,omitempty"`

	// Number A unique number for the invoice within 24SevenOffice ERP.
	Number *int32 `json:"number,omitempty"`

	// RemittanceReference A reference number for the invoice used for remittance purposes, like "KID"-number in Norway, or OCR.
	RemittanceReference *string `json:"remittanceReference,omitempty"`

	// Transaction Details of the transaction associated with the invoice.
	Transaction *InvoiceTransactionDto `json:"transaction,omitempty"`
}

// InvoiceTransactionDto Details of the transaction associated with the invoice.
type InvoiceTransactionDto struct {
	// Id A unique identifier for the transaction within 24SevenOffice ERP.
	Id *string `json:"id,omitempty"`
}

// KeepIncoming defines model for KeepIncoming.
type KeepIncoming = bool

// LicenseModel defines model for LicenseModel.
type LicenseModel struct {
	// Id The unique identifier for the license.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IdentityId The identifier for the connected person's identity.
	IdentityId *openapi_types.UUID `json:"identityId"`

	// Name The name of the organization.
	Name *string `json:"name"`

	// OrganizationId The identifier for the organization.
	OrganizationId *int64 `json:"organizationId"`

	// PersonId The identifier for the connected person.
	PersonId *int32 `json:"personId"`
}

// Line defines model for Line.
type Line struct {
	// Account Information about the account for which the balances belong to.
	Account *Account `json:"account,omitempty"`

	// Description A description for the line item.
	Description *string `json:"description,omitempty"`

	// Dimensions A list of dimensions associated with the line item, such as department or project.
	Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

	// DiscountRate The discount rate applied to the line item, expressed as a whole number. For example, a discount rate of 10% is represented as 10.
	DiscountRate *float32 `json:"discountRate,omitempty"`

	// Id The unique identifier for the sales order line item within 24SevenOffice ERP.
	Id *int `json:"id,omitempty"`

	// Price The price of a single unit of the product in the line item.
	Price *float32 `json:"price,omitempty"`

	// Product Product details, if the line item type is 'product'. Note that the `product` object for the `/salesorders/{id}/lines` endpoint is not the same as the product that can be retrieved from the `/products` endpoint, even though both share the same ID reference and their schemas are similar. The `product` object in the context of `/salesorders/{id}/lines` contains the product details as they were at the time the sales order line item was created. In contrast, the `/products` endpoint always provides the latest state values for the product properties.
	Product *Product `json:"product,omitempty"`

	// Quantity The quantity of the product in the line item.
	Quantity *float32 `json:"quantity,omitempty"`

	// Tax Details for the tax applied to the line item.
	Tax *LineWithoutIdTaxDto `json:"tax,omitempty"`

	// Type A specification for the type of the line item, whether this is a product or a text entry.
	Type *LineTypeEnum `json:"type,omitempty"`
}

// LineTypeEnum A specification for the type of the line item, whether this is a product or a text entry.
type LineTypeEnum string

// LineWithoutId A line item with its details in a sales order. The line item can be either a product or a text entry.
type LineWithoutId struct {
	// Account Information about the account for which the balances belong to.
	Account *Account `json:"account,omitempty"`

	// Description A description for the line item.
	Description *string `json:"description,omitempty"`

	// Dimensions A list of dimensions associated with the line item, such as department or project.
	Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

	// DiscountRate The discount rate applied to the line item, expressed as a whole number. For example, a discount rate of 10% is represented as 10.
	DiscountRate *float32 `json:"discountRate,omitempty"`

	// Price The price of a single unit of the product in the line item.
	Price *float32 `json:"price,omitempty"`

	// Product Product details, if the line item type is 'product'. Note that the `product` object for the `/salesorders/{id}/lines` endpoint is not the same as the product that can be retrieved from the `/products` endpoint, even though both share the same ID reference and their schemas are similar. The `product` object in the context of `/salesorders/{id}/lines` contains the product details as they were at the time the sales order line item was created. In contrast, the `/products` endpoint always provides the latest state values for the product properties.
	Product *Product `json:"product,omitempty"`

	// Quantity The quantity of the product in the line item.
	Quantity *float32 `json:"quantity,omitempty"`

	// Tax Details for the tax applied to the line item.
	Tax *LineWithoutIdTaxDto `json:"tax,omitempty"`

	// Type A specification for the type of the line item, whether this is a product or a text entry.
	Type *LineTypeEnum `json:"type,omitempty"`
}

// LineWithoutIdTaxDto Details for the tax applied to the line item.
type LineWithoutIdTaxDto struct {
	// Id A unique identifier for the tax code within 24SevenOffice ERP modules associated with the line item.
	Id *int `json:"id,omitempty"`

	// Number The tax code reference number visible for users.
	Number *int32 `json:"number,omitempty"`

	// Rate The tax rate percentage expressed as a whole number. For example a tax rate of 25% is represented as 25.
	Rate *float32 `json:"rate,omitempty"`
}

// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
type ModifiedAt = string

// OrganizationModelShortend defines model for OrganizationModel.
type OrganizationModelShortend struct {
	// Email The email address of the organization.
	Email *string `json:"email,omitempty"`

	// Id The unique identifier for the organization.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name The name of the organization.
	Name *string `json:"name,omitempty"`
}

// OrganizationModel defines model for OrganizationModel1.
type OrganizationModel struct {
	// Address The address of the organization.
	Address *AddressModel `json:"address,omitempty"`

	// Contact Contact information for the organization.
	Contact *ClientContactModel `json:"contact,omitempty"`

	// Email The email address of the organization.
	Email *string `json:"email"`

	// Id The unique identifier for the organization within 24SevenOffice.
	Id *int64 `json:"id,omitempty"`

	// InvoiceEmail The email address for invoices.
	InvoiceEmail *string `json:"invoiceEmail"`

	// Name The name of the organization.
	Name *string `json:"name"`

	// Settings Settings for the organization.
	Settings *OrganizationSettingsModel `json:"settings,omitempty"`

	// Status The state of the organization.
	Status *ClientStateType `json:"status,omitempty"`
}

// OrganizationSettingsModel Settings for the organization.
type OrganizationSettingsModel struct {
	// CurrencyCode The currency code for the organization.
	CurrencyCode *string `json:"currencyCode"`
}

// PaymenReferenceDto The payment reference must be one of the following types: text ocr invoiceRef.
// * `text`: The value is a free text reference.
// * `ocr`: The value is an structured OCR reference. KID number in Norway.
// * `invoiceRef`: The value is an invoice number.
//
// The actual value of the reference is set in the `value` property.
type PaymenReferenceDto struct {
	Type PaymenReferenceTypeEnum `json:"type"`

	// Value This must be a string of max 1000 characters.
	Value string `json:"value"`
}

// PaymenReferenceTypeEnum defines model for PaymenReferenceTypeEnum.
type PaymenReferenceTypeEnum string

// Periods defines model for Periods.
type Periods = string

// PostalAddress defines model for PostalAddress.
type PostalAddress = AddressBasic

// Product Product details, if the line item type is 'product'. Note that the `product` object for the `/salesorders/{id}/lines` endpoint is not the same as the product that can be retrieved from the `/products` endpoint, even though both share the same ID reference and their schemas are similar. The `product` object in the context of `/salesorders/{id}/lines` contains the product details as they were at the time the sales order line item was created. In contrast, the `/products` endpoint always provides the latest state values for the product properties.
type Product struct {
	// Id A unique identifier for the product within 24SevenOffice ERP-modules.
	Id *int `json:"id,omitempty"`
}

// ProductBase Base fields of products.
type ProductBase struct {
	// CostPrice The cost of buying the product from the supplier.
	CostPrice *float32 `json:"costPrice"`

	// Description The description of the product.
	Description *string `json:"description"`

	// Ean The product's 13-digit European Article Number (EAN).
	Ean *string `json:"ean"`

	// EanAlternative An alternative article number field, supporting up to 25 digits.
	EanAlternative *string `json:"eanAlternative"`

	// IndirectCost The sum of indirect costs related to the product.
	IndirectCost *float32 `json:"indirectCost"`

	// Name The name of the product.
	Name *string `json:"name,omitempty"`

	// Number The alternative user-defined product number.
	Number *string `json:"number"`

	// SalesPrice The selling price of the product.
	SalesPrice *float32 `json:"salesPrice"`

	// Status Specifies whether the product's status is active or inactive (expired).
	Status *ProductStatusEnum `json:"status,omitempty"`

	// Stock Stock information for the product.
	Stock *StockDto `json:"stock,omitempty"`

	// SupplierProduct Collection of properties related to the supplier's product.
	SupplierProduct *SupplierProductDto `json:"supplierProduct,omitempty"`

	// Type Specifies whether the product is defined as a regular or structure product.
	Type *ProductTypeEnum `json:"type,omitempty"`
}

// ProductRequestPatch defines model for ProductRequestPatch.
type ProductRequestPatch struct {
	// Category Information about the category to which the product belongs.
	Category *CategoryRequest `json:"category,omitempty"`

	// CostPrice The cost of buying the product from the supplier.
	CostPrice *float32 `json:"costPrice"`

	// Description The description of the product.
	Description *string `json:"description"`

	// Ean The product's 13-digit European Article Number (EAN).
	Ean *string `json:"ean"`

	// EanAlternative An alternative article number field, supporting up to 25 digits.
	EanAlternative *string `json:"eanAlternative"`

	// IndirectCost The sum of indirect costs related to the product.
	IndirectCost *float32 `json:"indirectCost"`

	// Name The name of the product.
	Name *string `json:"name,omitempty"`

	// Number The alternative user-defined product number.
	Number *string `json:"number"`

	// SalesPrice The selling price of the product.
	SalesPrice *float32 `json:"salesPrice"`

	// Status Specifies whether the product's status is active or inactive (expired).
	Status *ProductStatusEnum `json:"status,omitempty"`

	// Stock Stock information for the product.
	Stock *StockDto `json:"stock,omitempty"`

	// Supplier Information about the supplier of the product.
	Supplier *SupplierRequest `json:"supplier,omitempty"`

	// SupplierProduct Collection of properties related to the supplier's product.
	SupplierProduct *SupplierProductDto `json:"supplierProduct,omitempty"`

	// Type Specifies whether the product is defined as a regular or structure product.
	Type *ProductTypeEnum `json:"type,omitempty"`

	// Units Information about the units of measurement for the product.
	Units *UnitsRequest `json:"units,omitempty"`
}

// ProductRequestPost defines model for ProductRequestPost.
type ProductRequestPost struct {
	// Category Information about the category to which the product belongs.
	Category *CategoryRequest `json:"category,omitempty"`

	// CostPrice The cost of buying the product from the supplier.
	CostPrice *float32 `json:"costPrice"`

	// Description The description of the product.
	Description *string `json:"description"`

	// Ean The product's 13-digit European Article Number (EAN).
	Ean *string `json:"ean"`

	// EanAlternative An alternative article number field, supporting up to 25 digits.
	EanAlternative *string `json:"eanAlternative"`

	// IndirectCost The sum of indirect costs related to the product.
	IndirectCost *float32 `json:"indirectCost"`

	// Name The name of the product.
	Name *string `json:"name,omitempty"`

	// Number The alternative user-defined product number.
	Number *string `json:"number"`

	// SalesPrice The selling price of the product.
	SalesPrice *float32 `json:"salesPrice"`

	// Status Specifies whether the product's status is active or inactive (expired).
	Status *ProductStatusEnum `json:"status,omitempty"`

	// Stock Stock information for the product.
	Stock *StockDto `json:"stock,omitempty"`

	// Supplier Information about the supplier of the product.
	Supplier *SupplierRequest `json:"supplier,omitempty"`

	// SupplierProduct Collection of properties related to the supplier's product.
	SupplierProduct *SupplierProductDto `json:"supplierProduct,omitempty"`

	// Type Specifies whether the product is defined as a regular or structure product.
	Type *ProductTypeEnum `json:"type,omitempty"`

	// Units Information about the units of measurement for the product.
	Units *UnitsRequest `json:"units,omitempty"`
}

// ProductResponse defines model for ProductResponse.
type ProductResponse struct {
	// CategoryResponseIdAndName Information about the category to which the product belongs.
	CategoryResponseIdAndName *CategoryResponseIdAndName `json:"category,omitempty"`

	// CostPrice The cost of buying the product from the supplier.
	CostPrice *float32 `json:"costPrice"`

	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *CreatedAt `json:"createdAt,omitempty"`

	// Description The description of the product.
	Description *string `json:"description"`

	// Ean The product's 13-digit European Article Number (EAN).
	Ean *string `json:"ean"`

	// EanAlternative An alternative article number field, supporting up to 25 digits.
	EanAlternative *string `json:"eanAlternative"`

	// Id A unique identifier for the product within 24SevenOffice ERP-modules.
	Id *int `json:"id,omitempty"`

	// IndirectCost The sum of indirect costs related to the product.
	IndirectCost *float32 `json:"indirectCost"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *ModifiedAt `json:"modifiedAt,omitempty"`

	// Name The name of the product.
	Name *string `json:"name,omitempty"`

	// Number The alternative user-defined product number.
	Number *string `json:"number"`

	// SalesPrice The selling price of the product.
	SalesPrice *float32 `json:"salesPrice"`

	// Status Specifies whether the product's status is active or inactive (expired).
	Status *ProductStatusEnum `json:"status,omitempty"`

	// Stock Stock information for the product.
	Stock *StockDto `json:"stock,omitempty"`

	// Supplier Information about the supplier of the product.
	Supplier *SupplierResponse `json:"supplier,omitempty"`

	// SupplierProduct Collection of properties related to the supplier's product.
	SupplierProduct *SupplierProductDto `json:"supplierProduct,omitempty"`

	// Type Specifies whether the product is defined as a regular or structure product.
	Type *ProductTypeEnum `json:"type,omitempty"`

	// Units Information about the units of measurement for the product.
	Units *UnitsRequest `json:"units,omitempty"`
}

// ProductStatusEnum Specifies whether the product's status is active or inactive (expired).
type ProductStatusEnum string

// ProductTypeEnum Specifies whether the product is defined as a regular or structure product.
type ProductTypeEnum string

// Products List of products
type Products = []ProductResponse

// ProfileModel defines model for ProfileModel.
type ProfileModel struct {
	// CountryCode The two-letter country code for the user, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode"`

	// Culture The culture setting of the user.
	Culture *string `json:"culture"`

	// FirstName The first name of the user.
	FirstName *string `json:"firstName"`

	// Id The unique identifier for the profile.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Language The language preference of the user.
	Language *string `json:"language"`

	// LastName The last name of the user.
	LastName *string `json:"lastName"`

	// TimeZone The time zone of the user.
	TimeZone *string `json:"timeZone"`
}

// SalesOrder defines model for SalesOrder.
type SalesOrder struct {
	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Customer Customer details for the sales order. Note that the `customer` object for the `/salesOrders` endpoint is not the same as the customer that can be retrieved from the `/customers` endpoint, even though both share the same ID reference and their schemas are similar. The `customer` object in the context of `/salesOrders` contains the customer details as they were at the time the sales order was created. In contrast, the `/customers` endpoint always provides the latest state values for the customer properties.
	Customer *Customer `json:"customer,omitempty"`

	// Date The date when the sales order was issued.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DeliveryCustomer Delivery details for the sales order.
	DeliveryCustomer *DeliveryCustomer `json:"deliveryCustomer,omitempty"`

	// Dimensions A list of dimensions and dimension values associated with the sales order, such as department or project.
	Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

	// Id A unique identifier for the sales order within 24SevenOffice ERP.
	Id *int `json:"id,omitempty"`

	// InternalMemo An internal memo for the sales order.
	InternalMemo *string `json:"internalMemo,omitempty"`

	// InvoiceWithTransaction Details of an invoice associated with a sales order.
	InvoiceWithTransaction *InvoiceWithTransaction `json:"invoice,omitempty"`

	// Memo A memo or comments for the sales order.
	Memo *string `json:"memo,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// SalesType The sales type for the sales order.
	SalesType *SalesTypeDto `json:"salesType,omitempty"`

	// Status Current status of the sales order.
	Status *SalesOrderStatusEnum `json:"status,omitempty"`
}

// SalesOrderStatusEnum Current status of the sales order.
type SalesOrderStatusEnum string

// SalesOrderWithoutCustomer defines model for SalesOrderWithoutCustomer.
type SalesOrderWithoutCustomer struct {
	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Date The date when the sales order was issued.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DeliveryCustomer Delivery details for the sales order.
	DeliveryCustomer *DeliveryCustomer `json:"deliveryCustomer,omitempty"`

	// Dimensions A list of dimensions and dimension values associated with the sales order, such as department or project.
	Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

	// InternalMemo An internal memo for the sales order.
	InternalMemo *string `json:"internalMemo,omitempty"`

	// InvoiceWithTransaction Details of an invoice associated with a sales order.
	InvoiceWithTransaction *InvoiceWithTransaction `json:"invoice,omitempty"`

	// Memo A memo or comments for the sales order.
	Memo *string `json:"memo,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// SalesType The sales type for the sales order.
	SalesType *SalesTypeDto `json:"salesType,omitempty"`

	// Status Current status of the sales order.
	Status *SalesOrderStatusEnum `json:"status,omitempty"`
}

// SalesType defines model for SalesType.
type SalesType struct {
	// Account The associated account within the 24SevenOffice accounting module for this sales type.
	Account *struct {
		// Id A unique identifier for the account within 24SevenOffice accounting module.
		Id *int `json:"id,omitempty"`
	} `json:"account,omitempty"`

	// Id The unique identifier of the sales type.
	Id *int `json:"id,omitempty"`

	// Name The name of the sales type.
	Name *string `json:"name,omitempty"`
}

// SalesTypeDto The sales type for the sales order.
type SalesTypeDto struct {
	// Id The unique identifier for the sales type. A negative value stands for a system-defined ID.
	Id *int `json:"id,omitempty"`
}

// SortInput defines model for SortInput.
type SortInput = string

// StockDto Stock information for the product.
type StockDto struct {
	// IsManaged A flag variable indicating whether a product should handle adjusting product quantity.
	IsManaged *bool `json:"isManaged,omitempty"`

	// Location The location identifier for the product like a shelf or a facility number for inventory management.
	Location *string `json:"location"`

	// Quantity The quantity of products that are in stock.
	Quantity *float32 `json:"quantity,omitempty"`
}

// SupplierProductDto Collection of properties related to the supplier's product.
type SupplierProductDto struct {
	// ItemCode The item code of the supplier product.
	ItemCode *string `json:"itemCode"`

	// Name The name of the supplier product.
	Name *string `json:"name"`

	// Number The item number of the supplier product.
	Number *string `json:"number"`

	// Price The price of the supplier product.
	Price *float32 `json:"price"`
}

// SupplierRequest Information about the supplier of the product.
type SupplierRequest struct {
	// Id The ID of the supplier. Product suppliers can be retrieved from the separate `/customers` endpoint (suppliers are customers with a flag variable "isSupplier" set to "true").
	Id *float32 `json:"id"`
}

// SupplierResponse Information about the supplier of the product.
type SupplierResponse struct {
	// Id The ID of the supplier. Product suppliers can be retrieved from the separate `/customers` endpoint (suppliers are customers with a flag variable "isSupplier" set to "true").
	Id *float32 `json:"id"`

	// Name The name of the supplier.
	Name *string `json:"name"`
}

// Tax Details of a tax used within 24SevenOffice.
type Tax struct {
	// Id A unique identifier for the tax within 24SevenOffice.
	Id *int `json:"id,omitempty"`

	// Rate The tax rate applied to the transaction line.
	Rate *float32 `json:"rate,omitempty"`
}

// TaxResponse A single tax code
type TaxResponse struct {
	// Id A unique identifier for the tax code within 24SevenOffice ERP modules.
	Id *int `json:"id,omitempty"`

	// Name The name of the tax code.
	Name *string `json:"name,omitempty"`

	// Number The tax code reference number visible for users.
	Number *int `json:"number,omitempty"`

	// Rate The tax rate percentage, expressed as a whole number. For example, a tax rate of 25% is represented as 25.
	Rate *float32 `json:"rate,omitempty"`
}

// TfsoApiOrganizationModelsUserType defines model for TfsoApiOrganizationModelsUserType.
type TfsoApiOrganizationModelsUserType string

// TfsoApiOrganizationUnitOfWorkModelsPersonModel defines model for TfsoApiOrganizationUnitOfWorkModelsPersonModel.
type TfsoApiOrganizationUnitOfWorkModelsPersonModel struct {
	// FirstName The first name of the person.
	FirstName *string `json:"firstName"`

	// HasLicense A flag variable indicating whether the person has a license.
	HasLicense *bool `json:"hasLicense,omitempty"`

	// Id The unique identifier for the person within 24SevenOffice.
	Id *int32 `json:"id,omitempty"`

	// IdentityId The identifier for the connected identity.
	IdentityId *openapi_types.UUID `json:"identityId"`

	// LastName The last name of the person.
	LastName   *string                            `json:"lastName"`
	PersonType *TfsoApiOrganizationModelsUserType `json:"personType,omitempty"`
}

// Transaction Information about a single transaction line.
type Transaction struct {
	// Account Information about the account for which the balances belong to.
	Account Account `json:"account"`

	// Amount The monetary amount for the transaction line.
	Amount float32 `json:"amount"`

	// Comment A brief description of the transaction.
	Comment *string `json:"comment,omitempty"`

	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Currency  *Currency  `json:"currency,omitempty"`

	// CustomerIdOnly Details of a customer used within 24SevenOffice CRM.
	CustomerIdOnly *CustomerIdOnly `json:"customer,omitempty"`

	// Date The date when the transaction line was posted.
	Date openapi_types.Date `json:"date"`

	// Id A unique identifier for the transaction line within 24SevenOffice accounting module.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Invoice Details of an invoice used within 24SevenOffice.
	Invoice *Invoice `json:"invoice,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// Tax Details of a tax used within 24SevenOffice.
	Tax *Tax `json:"tax,omitempty"`

	// Transaction Details of the transaction within the 24SevenOffice accounting module to which the transaction line pertains.
	//
	// Note: Many other Norway-based accounting systems refer to transactions as "vouchers".
	Transaction *Voucher `json:"transaction,omitempty"`

	// TransactionTypeIdOnly Details of a transaction type used within the 24SevenOffice accounting module.
	TransactionTypeIdOnly *TransactionTypeIdOnly `json:"transactionType,omitempty"`
}

// TransactionTypeIdOnly Details of a transaction type used within the 24SevenOffice accounting module.
type TransactionTypeIdOnly struct {
	// Id A unique identifier for the transaction type within 24SevenOffice accounting module.
	Id *int `json:"id,omitempty"`
}

// TransactionType Information about a single transaction type within the 24SevenOffice accounting module.
type TransactionType struct {
	// Id A unique identifier for the transaction type within 24SevenOffice accounting module.
	Id *int `json:"id,omitempty"`

	// Name A human-readable name of the transaction type.
	Name *string `json:"name,omitempty"`

	// Number A unique number representing the transaction type.
	Number *int `json:"number,omitempty"`
}

// TransactionTypes List of transaction types available within the 24SevenOffice accounting module.
type TransactionTypes = []TransactionType

// Type defines model for Type.
type Type string

// Units List of product units of measurement.
type Units = []UnitsResponse

// UnitsRequest Information about the units of measurement for the product.
type UnitsRequest struct {
	// Id The ID of the units of measurement. Product units can be retrieved from the separate `/productunits` endpoint.
	Id *float32 `json:"id"`
}

// UnitsResponse A single unit of measurement.
type UnitsResponse struct {
	// Id The ID of the unit of measurement.
	Id *float32 `json:"id"`

	// Name The name of the unit of measurement.
	Name *string `json:"name"`

	// Symbol The symbol of the unit of measurement.
	Symbol *string `json:"symbol"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Error Validation error details.
	Error *struct {
		// Name The name for the error.
		Name *ValidationErrorErrorName `json:"name,omitempty"`

		// Payload The payload for the validation error.
		Payload *struct {
			// ValidationErrors A list of validation errors.
			ValidationErrors *[]struct {
				// Keyword A validation keyword.
				Keyword *string `json:"keyword,omitempty"`

				// Path A path for the invalid field.
				Path *string `json:"path,omitempty"`
			} `json:"validationErrors,omitempty"`
		} `json:"payload,omitempty"`
	} `json:"error,omitempty"`

	// TrackingId A tracking identifier for the validation error.
	TrackingId *string `json:"trackingId,omitempty"`
}

// ValidationErrorErrorName The name for the error.
type ValidationErrorErrorName string

// VisitAddress defines model for VisitAddress.
type VisitAddress struct {
	// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
	CountryCode *string `json:"countryCode"`

	// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
	CountrySubdivision *string `json:"countrySubdivision"`

	// PostalArea The postal area for the address.
	PostalArea *string `json:"postalArea"`

	// PostalCode The postal code for the address.
	PostalCode *string `json:"postalCode"`

	// Street The street for the address. Can contain a street name, building and apartment number, a PO box number, or similar.
	Street *string `json:"street"`
}

// Voucher Details of the transaction within the 24SevenOffice accounting module to which the transaction line pertains.
//
// Note: Many other Norway-based accounting systems refer to transactions as "vouchers".
type Voucher struct {
	// Id A unique identifier for the transaction within 24SevenOffice accounting module.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Number The unique number representing the transaction.
	Number *int `json:"number,omitempty"`
}

// Id defines model for id.
type Id = int32

// GetAccountbalancesParams defines parameters for GetAccountbalances.
type GetAccountbalancesParams struct {
	// DateFrom The starting date from which balances will be retrieved.
	DateFrom DateFrom `form:"dateFrom" json:"dateFrom"`

	// DateTo The ending date until which balances will be retrieved.
	DateTo DateTo `form:"dateTo" json:"dateTo"`

	// Periods Specifies the periods for which the balances will be retrieved.
	Periods *Periods `form:"periods,omitempty" json:"periods,omitempty"`

	// Type Specifies the type of data to be retrieved.
	Type *Type `form:"type,omitempty" json:"type,omitempty"`

	// KeepIncoming Indicates whether to include incoming amounts in the response. Default is false.
	KeepIncoming *KeepIncoming `form:"keepIncoming,omitempty" json:"keepIncoming,omitempty"`
}

// GetAccountbalancesIdParams defines parameters for GetAccountbalancesId.
type GetAccountbalancesIdParams struct {
	// DateFrom The starting date from which balances will be retrieved.
	DateFrom DateFrom `form:"dateFrom" json:"dateFrom"`

	// DateTo The ending date until which balances will be retrieved.
	DateTo DateTo `form:"dateTo" json:"dateTo"`

	// Periods Specifies the periods for which the balances will be retrieved.
	Periods *Periods `form:"periods,omitempty" json:"periods,omitempty"`

	// Type Specifies the type of data to be retrieved.
	Type *Type `form:"type,omitempty" json:"type,omitempty"`

	// KeepIncoming Indicates whether to include incoming amounts in the response. Default is false.
	KeepIncoming *KeepIncoming `form:"keepIncoming,omitempty" json:"keepIncoming,omitempty"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Query Filters accounts containing the specified keyword(-s) within their name or number properties. For example, a GET request `/accounts/?query=salary` would return accounts with "salary" in their name or number.
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetBankaccountsParams defines parameters for GetBankaccounts.
type GetBankaccountsParams struct {
	// Before The date to get the balance from. The balance returned will be the last balance before this date. If omitted, the current date is used. The date format here is YYYY-MM-DD.
	Before *openapi_types.Date `form:"before,omitempty" json:"before,omitempty"`
}

// GetBankaccountsIdParams defines parameters for GetBankaccountsId.
type GetBankaccountsIdParams struct {
	// Before The date to get the balance from. The balance returned will be the last balance before this date. If omitted, the current date is used. The date format here is YYYY-MM-DD.
	Before *openapi_types.Date `form:"before,omitempty" json:"before,omitempty"`
}

// GetBanktransactionsParams defines parameters for GetBanktransactions.
type GetBanktransactionsParams struct {
	// DateFrom Filter bank transactions by start date (inclusive). Date format should be YYYY-MM-DD. Compares dates by greater or equal. Accepts dates in ISO 8601 format.
	DateFrom openapi_types.Date `form:"dateFrom" json:"dateFrom"`

	// DateTo Filter bank transactions by end date (inclusive). Date format should be YYYY-MM-DD. Compares dates by less or equal. Accepts dates in ISO 8601 format. The date range cannot span more than two years.
	DateTo openapi_types.Date `form:"dateTo" json:"dateTo"`

	// BankAccountId Filter bank transactions by bank account ID.
	BankAccountId *openapi_types.UUID `form:"bankAccountId,omitempty" json:"bankAccountId,omitempty"`

	// Limit Specify the number of items to fetch per page, defaults to 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page Specify the page number to fetch, defaults to 1.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// GetCustomersParams defines parameters for GetCustomers.
type GetCustomersParams struct {
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrganizationNumber Filter customers by organization number.
	OrganizationNumber *string `form:"organizationNumber,omitempty" json:"organizationNumber,omitempty"`

	// IsCompany A flag variable to filter customers by company or person.
	IsCompany *bool `form:"isCompany,omitempty" json:"isCompany,omitempty"`

	// IsSupplier A flag variable to filter customers by being a supplier or not.
	IsSupplier *bool `form:"isSupplier,omitempty" json:"isSupplier,omitempty"`

	// ModifiedFrom Filter customers by date of last modification. Compares dates by greater or equal and accepts dates in ISO8601 format
	ModifiedFrom *string `form:"modifiedFrom,omitempty" json:"modifiedFrom,omitempty"`

	// CreatedFrom Filter customers by date created. Compares dates by greater or equal and accepts dates in ISO8601 format
	CreatedFrom *string `form:"createdFrom,omitempty" json:"createdFrom,omitempty"`

	// SortBy Sort customers by field and direction. Takes in a pair of field and direction separated by a colon symbol ':'
	SortBy *SortInput `form:"sortBy,omitempty" json:"sortBy,omitempty"`
}

// GetMeParams defines parameters for GetMe.
type GetMeParams struct {
	// Thumb A flag variable to include a thumbnail image in the response.
	Thumb *bool `form:"thumb,omitempty" json:"thumb,omitempty"`

	// Bigthumb A flag variable to include a larger thumbnail image in the response.
	Bigthumb *bool `form:"bigthumb,omitempty" json:"bigthumb,omitempty"`

	// MaxAge Maximum age of the cached profile data in seconds.
	MaxAge *int32 `form:"maxAge,omitempty" json:"maxAge,omitempty"`
}

// GetMeIdentifiersParams defines parameters for GetMeIdentifiers.
type GetMeIdentifiersParams struct {
	// Type The type of identifiers to retrieve.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// Status Status of the identifier as per communication status type.
	Status *CommunicationStatusType `form:"status,omitempty" json:"status,omitempty"`
}

// GetLicensesParams defines parameters for GetLicenses.
type GetLicensesParams struct {
	// OrganizationId Identifier for the organization.
	OrganizationId *int64 `form:"organizationId,omitempty" json:"organizationId,omitempty"`

	// PersonId Identifier for the connected person.
	PersonId *int32 `form:"personId,omitempty" json:"personId,omitempty"`
}

// GetOrganizationPeopleParams defines parameters for GetOrganizationPeople.
type GetOrganizationPeopleParams struct {
	// PersonType Type of person to filter by.
	PersonType *TfsoApiOrganizationModelsUserType `form:"personType,omitempty" json:"personType,omitempty"`
}

// GetOrganizationPeopleIdParams defines parameters for GetOrganizationPeopleId.
type GetOrganizationPeopleIdParams struct {
	// PersonType Type of person to filter by.
	PersonType *TfsoApiOrganizationModelsUserType `form:"personType,omitempty" json:"personType,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	// Page Specify the page number to fetch, defaults to 1.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Specify the number of items to fetch per page, defaults to 25.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// ProductSearch Perform a search in productNumber, name, and supplier's productNumber and name. Wildcards are allowed using '%'. '%' at the end returns 'starts with'. '%' at the beginning returns 'ends with'. '%' at both ends returns 'contains'.
	ProductSearch *string `form:"productSearch,omitempty" json:"productSearch,omitempty"`

	// ProductNumber Searches for product number.
	ProductNumber *string `form:"productNumber,omitempty" json:"productNumber,omitempty"`
}

// GetSalesordersParams defines parameters for GetSalesorders.
type GetSalesordersParams struct {
	// Limit The maximum number of sales orders to retrieve.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// ContinuationToken A token for continuing the retrieval of sales orders.
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// Date A specific date to filter sales orders.
	Date *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`

	// DateFrom A start date to filter sales orders.
	DateFrom *openapi_types.Date `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// DateTo An end date to filter sales orders.
	DateTo *openapi_types.Date `form:"dateTo,omitempty" json:"dateTo,omitempty"`

	// Status Filter sales orders by their status.
	Status *SalesOrderStatusEnum `form:"status,omitempty" json:"status,omitempty"`

	// CustomerId Filter sales orders by customer ID.
	CustomerId *string `form:"customerId,omitempty" json:"customerId,omitempty"`

	// InvoiceNumber Filter sales orders by invoice number.
	InvoiceNumber *string `form:"invoiceNumber,omitempty" json:"invoiceNumber,omitempty"`

	// CreatedFrom A start date-time to filter sales orders by creation time.
	CreatedFrom *time.Time `form:"createdFrom,omitempty" json:"createdFrom,omitempty"`

	// CreatedTo An end date-time to filter sales orders by creation time.
	CreatedTo *time.Time `form:"createdTo,omitempty" json:"createdTo,omitempty"`

	// ModifiedFrom A start date-time to filter sales orders by modification time.
	ModifiedFrom *time.Time `form:"modifiedFrom,omitempty" json:"modifiedFrom,omitempty"`

	// ModifiedTo An end date-time to filter sales orders by modification time.
	ModifiedTo *time.Time `form:"modifiedTo,omitempty" json:"modifiedTo,omitempty"`
}

// PostSalesordersJSONBody defines parameters for PostSalesorders.
type PostSalesordersJSONBody struct {
	// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Customer  *struct {
		// City The city for the address.
		City *string `json:"city,omitempty"`

		// CountryCode The two-letter country code for the address, as in ISO 3166-1 alpha-2 standard.
		CountryCode *string `json:"countryCode,omitempty"`

		// CountrySubdivision The geographical subdivision for the address, like a county ("fylke" in Norway) or a state.
		CountrySubdivision *string `json:"countrySubdivision,omitempty"`

		// Gln The Global Location Number (GLN) for the customer.
		Gln *string `json:"gln,omitempty"`

		// Id A unique identifier for the customer within 24SevenOffice CRM.
		Id int `json:"id"`

		// InvoiceEmailAddresses A list of email addresses to which the invoice should be sent.
		InvoiceEmailAddresses *[]openapi_types.Email `json:"invoiceEmailAddresses,omitempty"`

		// Name The customer name as it appears on the sales order and an invoice associated with the sales order.
		Name string `json:"name"`

		// OrganizationNumber The organization number issued by authorities, like a VAT number, of the customer if the customer is a company.
		OrganizationNumber *string `json:"organizationNumber,omitempty"`

		// PostalArea The postal area for the address.
		PostalArea *string `json:"postalArea,omitempty"`

		// PostalCode The postal code for the address.
		PostalCode *string `json:"postalCode,omitempty"`
	} `json:"customer,omitempty"`

	// Date The date when the sales order was issued.
	Date *openapi_types.Date `json:"date,omitempty"`

	// DeliveryCustomer Delivery details for the sales order.
	DeliveryCustomer *DeliveryCustomer `json:"deliveryCustomer,omitempty"`

	// Dimensions A list of dimensions and dimension values associated with the sales order, such as department or project.
	Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

	// InternalMemo An internal memo for the sales order.
	InternalMemo *string `json:"internalMemo,omitempty"`

	// InvoiceWithTransaction Details of an invoice associated with a sales order.
	InvoiceWithTransaction *InvoiceWithTransaction `json:"invoice,omitempty"`

	// Memo A memo or comments for the sales order.
	Memo *string `json:"memo,omitempty"`

	// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

	// SalesType The sales type for the sales order.
	SalesType *SalesTypeDto `json:"salesType,omitempty"`

	// Status Current status of the sales order.
	Status *SalesOrderStatusEnum `json:"status,omitempty"`
}

// GetTransactionlinesParams defines parameters for GetTransactionlines.
type GetTransactionlinesParams struct {
	// DateFrom The starting date (inclusive) from which transactions will be retrieved.
	DateFrom openapi_types.Date `form:"dateFrom" json:"dateFrom"`

	// DateTo The ending date (exclusive) until which transactions will be retrieved. If set to 2024-01-01, the latest result will be retrieved before 23:59 on 2023-12-31.
	DateTo openapi_types.Date `form:"dateTo" json:"dateTo"`

	// TransactionNumber The unique number representing the transaction.
	TransactionNumber *float32 `form:"transactionNumber,omitempty" json:"transactionNumber,omitempty"`

	// TransactionTypeId ID representing the type of transaction.
	TransactionTypeId *int `form:"transactionTypeId,omitempty" json:"transactionTypeId,omitempty"`

	// CustomerId ID of the customer involved in the transaction.
	CustomerId *int `form:"customerId,omitempty" json:"customerId,omitempty"`

	// AccountId ID of the account involved in the transaction.
	AccountId *int `form:"accountId,omitempty" json:"accountId,omitempty"`

	// AccountNumber The number of the account involved in the transaction.
	AccountNumber *int `form:"accountNumber,omitempty" json:"accountNumber,omitempty"`

	// InvoiceNumber The invoice number associated with the transaction.
	InvoiceNumber *string `form:"invoiceNumber,omitempty" json:"invoiceNumber,omitempty"`

	// CurrencyCode The currency code used in the transaction.
	CurrencyCode *string `form:"currencyCode,omitempty" json:"currencyCode,omitempty"`

	// Limit The maximum number of transactions to retrieve.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Page The page number of the results to retrieve.
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// PostBankaccountsJSONRequestBody defines body for PostBankaccounts for application/json ContentType.
type PostBankaccountsJSONRequestBody = BankAccountRequestPost

// PostBankaccountsIdBalancesJSONRequestBody defines body for PostBankaccountsIdBalances for application/json ContentType.
type PostBankaccountsIdBalancesJSONRequestBody = BankAccountBalanceRequestPost

// PostBanktransactionsJSONRequestBody defines body for PostBanktransactions for application/json ContentType.
type PostBanktransactionsJSONRequestBody = BankTransactionRequestPost

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = CustomerPostRequest

// UpdateCustomerJSONRequestBody defines body for UpdateCustomer for application/json ContentType.
type UpdateCustomerJSONRequestBody = CustomerPatchRequest

// CreateCategoryJSONRequestBody defines body for CreateCategory for application/json ContentType.
type CreateCategoryJSONRequestBody = CategoryPostRequest

// UpdateCategoryJSONRequestBody defines body for UpdateCategory for application/json ContentType.
type UpdateCategoryJSONRequestBody = CategoryPatchRequest

// CreateProductJSONRequestBody defines body for CreateProduct for application/json ContentType.
type CreateProductJSONRequestBody = ProductRequestPost

// UpdateProductJSONRequestBody defines body for UpdateProduct for application/json ContentType.
type UpdateProductJSONRequestBody = ProductRequestPatch

// PostSalesordersJSONRequestBody defines body for PostSalesorders for application/json ContentType.
type PostSalesordersJSONRequestBody PostSalesordersJSONBody

// PatchSalesordersIdJSONRequestBody defines body for PatchSalesordersId for application/json ContentType.
type PatchSalesordersIdJSONRequestBody = SalesOrder

// PostSalesordersIdLinesJSONRequestBody defines body for PostSalesordersIdLines for application/json ContentType.
type PostSalesordersIdLinesJSONRequestBody = LineWithoutId

// PatchSalesordersIdLinesLineIdJSONRequestBody defines body for PatchSalesordersIdLinesLineId for application/json ContentType.
type PatchSalesordersIdLinesLineIdJSONRequestBody = Line

// AsCustomerPostRequest0 returns the union data inside the CustomerPostRequest as a CustomerPostRequest0
func (t CustomerPostRequest) AsCustomerPostRequest0() (CustomerPostRequest0, error) {
	var body CustomerPostRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerPostRequest0 overwrites any union data inside the CustomerPostRequest as the provided CustomerPostRequest0
func (t *CustomerPostRequest) FromCustomerPostRequest0(v CustomerPostRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerPostRequest0 performs a merge with any union data inside the CustomerPostRequest, using the provided CustomerPostRequest0
func (t *CustomerPostRequest) MergeCustomerPostRequest0(v CustomerPostRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCustomerPostRequest1 returns the union data inside the CustomerPostRequest as a CustomerPostRequest1
func (t CustomerPostRequest) AsCustomerPostRequest1() (CustomerPostRequest1, error) {
	var body CustomerPostRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCustomerPostRequest1 overwrites any union data inside the CustomerPostRequest as the provided CustomerPostRequest1
func (t *CustomerPostRequest) FromCustomerPostRequest1(v CustomerPostRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCustomerPostRequest1 performs a merge with any union data inside the CustomerPostRequest, using the provided CustomerPostRequest1
func (t *CustomerPostRequest) MergeCustomerPostRequest1(v CustomerPostRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CustomerPostRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Address != nil {
		object["address"], err = json.Marshal(t.Address)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'address': %w", err)
		}
	}

	if t.Email != nil {
		object["email"], err = json.Marshal(t.Email)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'email': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.IsSupplier != nil {
		object["isSupplier"], err = json.Marshal(t.IsSupplier)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isSupplier': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.OrganizationNumber != nil {
		object["organizationNumber"], err = json.Marshal(t.OrganizationNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'organizationNumber': %w", err)
		}
	}

	if t.Person != nil {
		object["person"], err = json.Marshal(t.Person)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'person': %w", err)
		}
	}

	if t.Phone != nil {
		object["phone"], err = json.Marshal(t.Phone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'phone': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CustomerPostRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["address"]; found {
		err = json.Unmarshal(raw, &t.Address)
		if err != nil {
			return fmt.Errorf("error reading 'address': %w", err)
		}
	}

	if raw, found := object["email"]; found {
		err = json.Unmarshal(raw, &t.Email)
		if err != nil {
			return fmt.Errorf("error reading 'email': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["isSupplier"]; found {
		err = json.Unmarshal(raw, &t.IsSupplier)
		if err != nil {
			return fmt.Errorf("error reading 'isSupplier': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["organizationNumber"]; found {
		err = json.Unmarshal(raw, &t.OrganizationNumber)
		if err != nil {
			return fmt.Errorf("error reading 'organizationNumber': %w", err)
		}
	}

	if raw, found := object["person"]; found {
		err = json.Unmarshal(raw, &t.Person)
		if err != nil {
			return fmt.Errorf("error reading 'person': %w", err)
		}
	}

	if raw, found := object["phone"]; found {
		err = json.Unmarshal(raw, &t.Phone)
		if err != nil {
			return fmt.Errorf("error reading 'phone': %w", err)
		}
	}

	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// WriteClient which conforms to the OpenAPI3 specification for this service.
type WriteClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*WriteClient) error

// Creates a new WriteClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*WriteClient, error) {
	// create a client with sane default values
	client := WriteClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *WriteClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *WriteClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccountbalances request
	GetAccountbalances(ctx context.Context, params *GetAccountbalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountbalancesId request
	GetAccountbalancesId(ctx context.Context, id int, params *GetAccountbalancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccounts request
	GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsId request
	GetAccountsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankaccounts request
	GetBankaccounts(ctx context.Context, params *GetBankaccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBankaccountsWithBody request with any body
	PostBankaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBankaccounts(ctx context.Context, body PostBankaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBankaccountsId request
	GetBankaccountsId(ctx context.Context, id string, params *GetBankaccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBankaccountsIdBalancesWithBody request with any body
	PostBankaccountsIdBalancesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBankaccountsIdBalances(ctx context.Context, id string, body PostBankaccountsIdBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBanktransactions request
	GetBanktransactions(ctx context.Context, params *GetBanktransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBanktransactionsWithBody request with any body
	PostBanktransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBanktransactions(ctx context.Context, body PostBanktransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBanktransactionsBankTransactionReference request
	GetBanktransactionsBankTransactionReference(ctx context.Context, bankTransactionReference string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCurrencies request
	GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomers request
	GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomerWithBody request with any body
	CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomersId request
	DeleteCustomersId(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersId request
	GetCustomersId(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomerWithBody request with any body
	UpdateCustomerWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomer(ctx context.Context, id Id, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, params *GetMeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeIdentifiers request
	GetMeIdentifiers(ctx context.Context, params *GetMeIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeIdentifiersId request
	GetMeIdentifiersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLicenses request
	GetLicenses(ctx context.Context, params *GetLicensesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeLicensesIdOrganization request
	GetMeLicensesIdOrganization(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationPeople request
	GetOrganizationPeople(ctx context.Context, params *GetOrganizationPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationPeopleId request
	GetOrganizationPeopleId(ctx context.Context, id int32, params *GetOrganizationPeopleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCategories request
	GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCategoryWithBody request with any body
	CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCategory request
	DeleteCategory(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductcategoriesId request
	GetProductcategoriesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCategoryWithBody request with any body
	UpdateCategoryWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCategory(ctx context.Context, id int32, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProductWithBody request with any body
	CreateProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProduct(ctx context.Context, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProduct request
	DeleteProduct(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsId request
	GetProductsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProductWithBody request with any body
	UpdateProductWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProduct(ctx context.Context, id int32, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnits request
	GetUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesorders request
	GetSalesorders(ctx context.Context, params *GetSalesordersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesordersWithBody request with any body
	PostSalesordersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesorders(ctx context.Context, body PostSalesordersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesordersId request
	GetSalesordersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSalesordersIdWithBody request with any body
	PatchSalesordersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSalesordersId(ctx context.Context, id int32, body PatchSalesordersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesordersIdLines request
	GetSalesordersIdLines(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSalesordersIdLinesWithBody request with any body
	PostSalesordersIdLinesWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSalesordersIdLines(ctx context.Context, id int32, body PostSalesordersIdLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalesordersIdLinesLineId request
	GetSalesordersIdLinesLineId(ctx context.Context, id int32, lineId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSalesordersIdLinesLineIdWithBody request with any body
	PatchSalesordersIdLinesLineIdWithBody(ctx context.Context, id int32, lineId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSalesordersIdLinesLineId(ctx context.Context, id int32, lineId int32, body PatchSalesordersIdLinesLineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalestypes request
	GetSalestypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSalestypesId request
	GetSalestypesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxes request
	GetTaxes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaxesId request
	GetTaxesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionlines request
	GetTransactionlines(ctx context.Context, params *GetTransactionlinesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionlinesId request
	GetTransactionlinesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactiontypes request
	GetTransactiontypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *WriteClient) GetAccountbalances(ctx context.Context, params *GetAccountbalancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountbalancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAccountbalancesId(ctx context.Context, id int, params *GetAccountbalancesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountbalancesIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAccountsId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetBankaccounts(ctx context.Context, params *GetBankaccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankaccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBankaccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBankaccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBankaccounts(ctx context.Context, body PostBankaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBankaccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetBankaccountsId(ctx context.Context, id string, params *GetBankaccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBankaccountsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBankaccountsIdBalancesWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBankaccountsIdBalancesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBankaccountsIdBalances(ctx context.Context, id string, body PostBankaccountsIdBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBankaccountsIdBalancesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetBanktransactions(ctx context.Context, params *GetBanktransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBanktransactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBanktransactionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBanktransactionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostBanktransactions(ctx context.Context, body PostBanktransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBanktransactionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetBanktransactionsBankTransactionReference(ctx context.Context, bankTransactionReference string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBanktransactionsBankTransactionReferenceRequest(c.Server, bankTransactionReference)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetCurrencies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCurrenciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetCustomers(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) DeleteCustomersId(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetCustomersId(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateCustomerWithBody(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateCustomer(ctx context.Context, id Id, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetMe(ctx context.Context, params *GetMeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetMeIdentifiers(ctx context.Context, params *GetMeIdentifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeIdentifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetMeIdentifiersId(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeIdentifiersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetLicenses(ctx context.Context, params *GetLicensesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLicensesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetMeLicensesIdOrganization(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeLicensesIdOrganizationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetOrganization(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetOrganizationPeople(ctx context.Context, params *GetOrganizationPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationPeopleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetOrganizationPeopleId(ctx context.Context, id int32, params *GetOrganizationPeopleIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationPeopleIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateCategoryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateCategory(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCategoryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) DeleteCategory(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCategoryRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetProductcategoriesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductcategoriesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateCategoryWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCategoryRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateCategory(ctx context.Context, id int32, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCategoryRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateProductWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) CreateProduct(ctx context.Context, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProductRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) DeleteProduct(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProductRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetProductsId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateProductWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) UpdateProduct(ctx context.Context, id int32, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProductRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalesorders(ctx context.Context, params *GetSalesordersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesordersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostSalesordersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesordersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostSalesorders(ctx context.Context, body PostSalesordersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesordersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalesordersId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesordersIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PatchSalesordersIdWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSalesordersIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PatchSalesordersId(ctx context.Context, id int32, body PatchSalesordersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSalesordersIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalesordersIdLines(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesordersIdLinesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostSalesordersIdLinesWithBody(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesordersIdLinesRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostSalesordersIdLines(ctx context.Context, id int32, body PostSalesordersIdLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSalesordersIdLinesRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalesordersIdLinesLineId(ctx context.Context, id int32, lineId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalesordersIdLinesLineIdRequest(c.Server, id, lineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PatchSalesordersIdLinesLineIdWithBody(ctx context.Context, id int32, lineId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSalesordersIdLinesLineIdRequestWithBody(c.Server, id, lineId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PatchSalesordersIdLinesLineId(ctx context.Context, id int32, lineId int32, body PatchSalesordersIdLinesLineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSalesordersIdLinesLineIdRequest(c.Server, id, lineId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalestypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalestypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetSalestypesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSalestypesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTaxes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTaxesId(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaxesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTransactionlines(ctx context.Context, params *GetTransactionlinesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionlinesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTransactionlinesId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionlinesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTransactiontypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactiontypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountbalancesRequest generates requests for GetAccountbalances
func NewGetAccountbalancesRequest(server string, params *GetAccountbalancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accountbalances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Periods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periods", runtime.ParamLocationQuery, *params.Periods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeepIncoming != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keepIncoming", runtime.ParamLocationQuery, *params.KeepIncoming); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountbalancesIdRequest generates requests for GetAccountbalancesId
func NewGetAccountbalancesIdRequest(server string, id int, params *GetAccountbalancesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accountbalances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Periods != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "periods", runtime.ParamLocationQuery, *params.Periods); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeepIncoming != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keepIncoming", runtime.ParamLocationQuery, *params.KeepIncoming); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string, params *GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsIdRequest generates requests for GetAccountsId
func NewGetAccountsIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBankaccountsRequest generates requests for GetBankaccounts
func NewGetBankaccountsRequest(server string, params *GetBankaccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bankaccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBankaccountsRequest calls the generic PostBankaccounts builder with application/json body
func NewPostBankaccountsRequest(server string, body PostBankaccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBankaccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBankaccountsRequestWithBody generates requests for PostBankaccounts with any type of body
func NewPostBankaccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bankaccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBankaccountsIdRequest generates requests for GetBankaccountsId
func NewGetBankaccountsIdRequest(server string, id string, params *GetBankaccountsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bankaccounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Before != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBankaccountsIdBalancesRequest calls the generic PostBankaccountsIdBalances builder with application/json body
func NewPostBankaccountsIdBalancesRequest(server string, id string, body PostBankaccountsIdBalancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBankaccountsIdBalancesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostBankaccountsIdBalancesRequestWithBody generates requests for PostBankaccountsIdBalances with any type of body
func NewPostBankaccountsIdBalancesRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bankaccounts/%s/balances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBanktransactionsRequest generates requests for GetBanktransactions
func NewGetBanktransactionsRequest(server string, params *GetBanktransactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banktransactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.BankAccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bankAccountId", runtime.ParamLocationQuery, *params.BankAccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBanktransactionsRequest calls the generic PostBanktransactions builder with application/json body
func NewPostBanktransactionsRequest(server string, body PostBanktransactionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBanktransactionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBanktransactionsRequestWithBody generates requests for PostBanktransactions with any type of body
func NewPostBanktransactionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banktransactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBanktransactionsBankTransactionReferenceRequest generates requests for GetBanktransactionsBankTransactionReference
func NewGetBanktransactionsBankTransactionReferenceRequest(server string, bankTransactionReference string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bankTransactionReference", runtime.ParamLocationPath, bankTransactionReference)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banktransactions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCurrenciesRequest generates requests for GetCurrencies
func NewGetCurrenciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/currencies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersRequest generates requests for GetCustomers
func NewGetCustomersRequest(server string, params *GetCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrganizationNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationNumber", runtime.ParamLocationQuery, *params.OrganizationNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsCompany != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isCompany", runtime.ParamLocationQuery, *params.IsCompany); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsSupplier != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isSupplier", runtime.ParamLocationQuery, *params.IsSupplier); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modifiedFrom", runtime.ParamLocationQuery, *params.ModifiedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdFrom", runtime.ParamLocationQuery, *params.CreatedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomerRequest calls the generic CreateCustomer builder with application/json body
func NewCreateCustomerRequest(server string, body CreateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCustomerRequestWithBody generates requests for CreateCustomer with any type of body
func NewCreateCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomersIdRequest generates requests for DeleteCustomersId
func NewDeleteCustomersIdRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersIdRequest generates requests for GetCustomersId
func NewGetCustomersIdRequest(server string, id Id) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomerRequest calls the generic UpdateCustomer builder with application/json body
func NewUpdateCustomerRequest(server string, id Id, body UpdateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomerRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateCustomerRequestWithBody generates requests for UpdateCustomer with any type of body
func NewUpdateCustomerRequestWithBody(server string, id Id, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string, params *GetMeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Thumb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "thumb", runtime.ParamLocationQuery, *params.Thumb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Bigthumb != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bigthumb", runtime.ParamLocationQuery, *params.Bigthumb); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxAge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxAge", runtime.ParamLocationQuery, *params.MaxAge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeIdentifiersRequest generates requests for GetMeIdentifiers
func NewGetMeIdentifiersRequest(server string, params *GetMeIdentifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeIdentifiersIdRequest generates requests for GetMeIdentifiersId
func NewGetMeIdentifiersIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLicensesRequest generates requests for GetLicenses
func NewGetLicensesRequest(server string, params *GetLicensesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/licenses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationId", runtime.ParamLocationQuery, *params.OrganizationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PersonId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personId", runtime.ParamLocationQuery, *params.PersonId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeLicensesIdOrganizationRequest generates requests for GetMeLicensesIdOrganization
func NewGetMeLicensesIdOrganizationRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/licenses/%s/organization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/information")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationPeopleRequest generates requests for GetOrganizationPeople
func NewGetOrganizationPeopleRequest(server string, params *GetOrganizationPeopleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/people")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PersonType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personType", runtime.ParamLocationQuery, *params.PersonType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationPeopleIdRequest generates requests for GetOrganizationPeopleId
func NewGetOrganizationPeopleIdRequest(server string, id int32, params *GetOrganizationPeopleIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/people/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PersonType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "personType", runtime.ParamLocationQuery, *params.PersonType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCategoriesRequest generates requests for GetCategories
func NewGetCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productcategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCategoryRequest calls the generic CreateCategory builder with application/json body
func NewCreateCategoryRequest(server string, body CreateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCategoryRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCategoryRequestWithBody generates requests for CreateCategory with any type of body
func NewCreateCategoryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productcategories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCategoryRequest generates requests for DeleteCategory
func NewDeleteCategoryRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productcategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductcategoriesIdRequest generates requests for GetProductcategoriesId
func NewGetProductcategoriesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productcategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCategoryRequest calls the generic UpdateCategory builder with application/json body
func NewUpdateCategoryRequest(server string, id int32, body UpdateCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCategoryRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateCategoryRequestWithBody generates requests for UpdateCategory with any type of body
func NewUpdateCategoryRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productcategories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductSearch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productSearch", runtime.ParamLocationQuery, *params.ProductSearch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productNumber", runtime.ParamLocationQuery, *params.ProductNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProductRequest calls the generic CreateProduct builder with application/json body
func NewCreateProductRequest(server string, body CreateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProductRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProductRequestWithBody generates requests for CreateProduct with any type of body
func NewCreateProductRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProductRequest generates requests for DeleteProduct
func NewDeleteProductRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsIdRequest generates requests for GetProductsId
func NewGetProductsIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProductRequest calls the generic UpdateProduct builder with application/json body
func NewUpdateProductRequest(server string, id int32, body UpdateProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProductRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateProductRequestWithBody generates requests for UpdateProduct with any type of body
func NewUpdateProductRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/products/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUnitsRequest generates requests for GetUnits
func NewGetUnitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/productunits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSalesordersRequest generates requests for GetSalesorders
func NewGetSalesordersRequest(server string, params *GetSalesordersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Date != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceNumber", runtime.ParamLocationQuery, *params.InvoiceNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdFrom", runtime.ParamLocationQuery, *params.CreatedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdTo", runtime.ParamLocationQuery, *params.CreatedTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modifiedFrom", runtime.ParamLocationQuery, *params.ModifiedFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modifiedTo", runtime.ParamLocationQuery, *params.ModifiedTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSalesordersRequest calls the generic PostSalesorders builder with application/json body
func NewPostSalesordersRequest(server string, body PostSalesordersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesordersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSalesordersRequestWithBody generates requests for PostSalesorders with any type of body
func NewPostSalesordersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesordersIdRequest generates requests for GetSalesordersId
func NewGetSalesordersIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSalesordersIdRequest calls the generic PatchSalesordersId builder with application/json body
func NewPatchSalesordersIdRequest(server string, id int32, body PatchSalesordersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSalesordersIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchSalesordersIdRequestWithBody generates requests for PatchSalesordersId with any type of body
func NewPatchSalesordersIdRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesordersIdLinesRequest generates requests for GetSalesordersIdLines
func NewGetSalesordersIdLinesRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s/lines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSalesordersIdLinesRequest calls the generic PostSalesordersIdLines builder with application/json body
func NewPostSalesordersIdLinesRequest(server string, id int32, body PostSalesordersIdLinesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSalesordersIdLinesRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostSalesordersIdLinesRequestWithBody generates requests for PostSalesordersIdLines with any type of body
func NewPostSalesordersIdLinesRequestWithBody(server string, id int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s/lines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalesordersIdLinesLineIdRequest generates requests for GetSalesordersIdLinesLineId
func NewGetSalesordersIdLinesLineIdRequest(server string, id int32, lineId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "lineId", runtime.ParamLocationPath, lineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s/lines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSalesordersIdLinesLineIdRequest calls the generic PatchSalesordersIdLinesLineId builder with application/json body
func NewPatchSalesordersIdLinesLineIdRequest(server string, id int32, lineId int32, body PatchSalesordersIdLinesLineIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSalesordersIdLinesLineIdRequestWithBody(server, id, lineId, "application/json", bodyReader)
}

// NewPatchSalesordersIdLinesLineIdRequestWithBody generates requests for PatchSalesordersIdLinesLineId with any type of body
func NewPatchSalesordersIdLinesLineIdRequestWithBody(server string, id int32, lineId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "lineId", runtime.ParamLocationPath, lineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salesorders/%s/lines/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSalestypesRequest generates requests for GetSalestypes
func NewGetSalestypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salestypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSalestypesIdRequest generates requests for GetSalestypesId
func NewGetSalestypesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/salestypes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxesRequest generates requests for GetTaxes
func NewGetTaxesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaxesIdRequest generates requests for GetTaxesId
func NewGetTaxesIdRequest(server string, id int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/taxes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionlinesRequest generates requests for GetTransactionlines
func NewGetTransactionlinesRequest(server string, params *GetTransactionlinesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactionlines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, params.DateFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, params.DateTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TransactionNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionNumber", runtime.ParamLocationQuery, *params.TransactionNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionTypeId", runtime.ParamLocationQuery, *params.TransactionTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, *params.CustomerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountId", runtime.ParamLocationQuery, *params.AccountId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AccountNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "accountNumber", runtime.ParamLocationQuery, *params.AccountNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InvoiceNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "invoiceNumber", runtime.ParamLocationQuery, *params.InvoiceNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CurrencyCode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currencyCode", runtime.ParamLocationQuery, *params.CurrencyCode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionlinesIdRequest generates requests for GetTransactionlinesId
func NewGetTransactionlinesIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactionlines/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactiontypesRequest generates requests for GetTransactiontypes
func NewGetTransactiontypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transactiontypes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *WriteClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *WriteClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountbalancesWithResponse request
	GetAccountbalancesWithResponse(ctx context.Context, params *GetAccountbalancesParams, reqEditors ...RequestEditorFn) (*GetAccountbalancesResponse, error)

	// GetAccountbalancesIdWithResponse request
	GetAccountbalancesIdWithResponse(ctx context.Context, id int, params *GetAccountbalancesIdParams, reqEditors ...RequestEditorFn) (*GetAccountbalancesIdResponse, error)

	// GetAccountsWithResponse request
	GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// GetAccountsIdWithResponse request
	GetAccountsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountsIdResponse, error)

	// GetBankaccountsWithResponse request
	GetBankaccountsWithResponse(ctx context.Context, params *GetBankaccountsParams, reqEditors ...RequestEditorFn) (*GetBankaccountsResponse, error)

	// PostBankaccountsWithBodyWithResponse request with any body
	PostBankaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBankaccountsResponse, error)

	PostBankaccountsWithResponse(ctx context.Context, body PostBankaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBankaccountsResponse, error)

	// GetBankaccountsIdWithResponse request
	GetBankaccountsIdWithResponse(ctx context.Context, id string, params *GetBankaccountsIdParams, reqEditors ...RequestEditorFn) (*GetBankaccountsIdResponse, error)

	// PostBankaccountsIdBalancesWithBodyWithResponse request with any body
	PostBankaccountsIdBalancesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBankaccountsIdBalancesResponse, error)

	PostBankaccountsIdBalancesWithResponse(ctx context.Context, id string, body PostBankaccountsIdBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBankaccountsIdBalancesResponse, error)

	// GetBanktransactionsWithResponse request
	GetBanktransactionsWithResponse(ctx context.Context, params *GetBanktransactionsParams, reqEditors ...RequestEditorFn) (*GetBanktransactionsResponse, error)

	// PostBanktransactionsWithBodyWithResponse request with any body
	PostBanktransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBanktransactionsResponse, error)

	PostBanktransactionsWithResponse(ctx context.Context, body PostBanktransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBanktransactionsResponse, error)

	// GetBanktransactionsBankTransactionReferenceWithResponse request
	GetBanktransactionsBankTransactionReferenceWithResponse(ctx context.Context, bankTransactionReference string, reqEditors ...RequestEditorFn) (*GetBanktransactionsBankTransactionReferenceResponse, error)

	// GetCurrenciesWithResponse request
	GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error)

	// GetCustomersWithResponse request
	GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error)

	// CreateCustomerWithBodyWithResponse request with any body
	CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	// DeleteCustomersIdWithResponse request
	DeleteCustomersIdWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error)

	// GetCustomersIdWithResponse request
	GetCustomersIdWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error)

	// UpdateCustomerWithBodyWithResponse request with any body
	UpdateCustomerWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error)

	UpdateCustomerWithResponse(ctx context.Context, id Id, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, params *GetMeParams, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetMeIdentifiersWithResponse request
	GetMeIdentifiersWithResponse(ctx context.Context, params *GetMeIdentifiersParams, reqEditors ...RequestEditorFn) (*GetMeIdentifiersResponse, error)

	// GetMeIdentifiersIdWithResponse request
	GetMeIdentifiersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMeIdentifiersIdResponse, error)

	// GetLicensesWithResponse request
	GetLicensesWithResponse(ctx context.Context, params *GetLicensesParams, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error)

	// GetMeLicensesIdOrganizationWithResponse request
	GetMeLicensesIdOrganizationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMeLicensesIdOrganizationResponse, error)

	// GetOrganizationWithResponse request
	GetOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// GetOrganizationPeopleWithResponse request
	GetOrganizationPeopleWithResponse(ctx context.Context, params *GetOrganizationPeopleParams, reqEditors ...RequestEditorFn) (*GetOrganizationPeopleResponse, error)

	// GetOrganizationPeopleIdWithResponse request
	GetOrganizationPeopleIdWithResponse(ctx context.Context, id int32, params *GetOrganizationPeopleIdParams, reqEditors ...RequestEditorFn) (*GetOrganizationPeopleIdResponse, error)

	// GetCategoriesWithResponse request
	GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error)

	// CreateCategoryWithBodyWithResponse request with any body
	CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error)

	// DeleteCategoryWithResponse request
	DeleteCategoryWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error)

	// GetProductcategoriesIdWithResponse request
	GetProductcategoriesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetProductcategoriesIdResponse, error)

	// UpdateCategoryWithBodyWithResponse request with any body
	UpdateCategoryWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error)

	UpdateCategoryWithResponse(ctx context.Context, id int32, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// CreateProductWithBodyWithResponse request with any body
	CreateProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductResponse, error)

	CreateProductWithResponse(ctx context.Context, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductResponse, error)

	// DeleteProductWithResponse request
	DeleteProductWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error)

	// GetProductsIdWithResponse request
	GetProductsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error)

	// UpdateProductWithBodyWithResponse request with any body
	UpdateProductWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error)

	UpdateProductWithResponse(ctx context.Context, id int32, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error)

	// GetUnitsWithResponse request
	GetUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUnitsResponse, error)

	// GetSalesordersWithResponse request
	GetSalesordersWithResponse(ctx context.Context, params *GetSalesordersParams, reqEditors ...RequestEditorFn) (*GetSalesordersResponse, error)

	// PostSalesordersWithBodyWithResponse request with any body
	PostSalesordersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesordersResponse, error)

	PostSalesordersWithResponse(ctx context.Context, body PostSalesordersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesordersResponse, error)

	// GetSalesordersIdWithResponse request
	GetSalesordersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdResponse, error)

	// PatchSalesordersIdWithBodyWithResponse request with any body
	PatchSalesordersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSalesordersIdResponse, error)

	PatchSalesordersIdWithResponse(ctx context.Context, id int32, body PatchSalesordersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSalesordersIdResponse, error)

	// GetSalesordersIdLinesWithResponse request
	GetSalesordersIdLinesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdLinesResponse, error)

	// PostSalesordersIdLinesWithBodyWithResponse request with any body
	PostSalesordersIdLinesWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesordersIdLinesResponse, error)

	PostSalesordersIdLinesWithResponse(ctx context.Context, id int32, body PostSalesordersIdLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesordersIdLinesResponse, error)

	// GetSalesordersIdLinesLineIdWithResponse request
	GetSalesordersIdLinesLineIdWithResponse(ctx context.Context, id int32, lineId int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdLinesLineIdResponse, error)

	// PatchSalesordersIdLinesLineIdWithBodyWithResponse request with any body
	PatchSalesordersIdLinesLineIdWithBodyWithResponse(ctx context.Context, id int32, lineId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSalesordersIdLinesLineIdResponse, error)

	PatchSalesordersIdLinesLineIdWithResponse(ctx context.Context, id int32, lineId int32, body PatchSalesordersIdLinesLineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSalesordersIdLinesLineIdResponse, error)

	// GetSalestypesWithResponse request
	GetSalestypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSalestypesResponse, error)

	// GetSalestypesIdWithResponse request
	GetSalestypesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalestypesIdResponse, error)

	// GetTaxesWithResponse request
	GetTaxesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxesResponse, error)

	// GetTaxesIdWithResponse request
	GetTaxesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetTaxesIdResponse, error)

	// GetTransactionlinesWithResponse request
	GetTransactionlinesWithResponse(ctx context.Context, params *GetTransactionlinesParams, reqEditors ...RequestEditorFn) (*GetTransactionlinesResponse, error)

	// GetTransactionlinesIdWithResponse request
	GetTransactionlinesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTransactionlinesIdResponse, error)

	// GetTransactiontypesWithResponse request
	GetTransactiontypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransactiontypesResponse, error)
}

type GetAccountbalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AggregationElement
}

// Status returns HTTPResponse.Status
func (r GetAccountbalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountbalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountbalancesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AggregationElement
}

// Status returns HTTPResponse.Status
func (r GetAccountbalancesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountbalancesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Account
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BankAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetBankaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBankaccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BankAccountResponse
}

// Status returns HTTPResponse.Status
func (r PostBankaccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBankaccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBankaccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankAccountResponse
}

// Status returns HTTPResponse.Status
func (r GetBankaccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBankaccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBankaccountsIdBalancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BankAccountBalanceResponse
}

// Status returns HTTPResponse.Status
func (r PostBankaccountsIdBalancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBankaccountsIdBalancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBanktransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BankTransactionResponse
}

// Status returns HTTPResponse.Status
func (r GetBanktransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBanktransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBanktransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BankTransactionResponse
}

// Status returns HTTPResponse.Status
func (r PostBanktransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBanktransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBanktransactionsBankTransactionReferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BankTransactionResponse
}

// Status returns HTTPResponse.Status
func (r GetBanktransactionsBankTransactionReferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBanktransactionsBankTransactionReferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCurrenciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *Currencies
	JSON200      *Currencies
}

// Status returns HTTPResponse.Status
func (r GetCurrenciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCurrenciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CustomerProperties
}

// Status returns HTTPResponse.Status
func (r GetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerResponse
}

// Status returns HTTPResponse.Status
func (r CreateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CustomerResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileModel
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentifierModel
}

// Status returns HTTPResponse.Status
func (r GetMeIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeIdentifiersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentifierModel
}

// Status returns HTTPResponse.Status
func (r GetMeIdentifiersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeIdentifiersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLicensesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LicenseModel
}

// Status returns HTTPResponse.Status
func (r GetLicensesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLicensesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeLicensesIdOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationModelShortend
}

// Status returns HTTPResponse.Status
func (r GetMeLicensesIdOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeLicensesIdOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TfsoApiOrganizationUnitOfWorkModelsPersonModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationPeopleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TfsoApiOrganizationUnitOfWorkModelsPersonModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationPeopleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationPeopleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Categories
}

// Status returns HTTPResponse.Status
func (r GetCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r CreateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductcategoriesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r GetProductcategoriesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductcategoriesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CategoryResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Products
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProductResponse
}

// Status returns HTTPResponse.Status
func (r CreateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResponse
}

// Status returns HTTPResponse.Status
func (r GetProductsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Units
}

// Status returns HTTPResponse.Status
func (r GetUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *struct {
		UnderscoreEmbedded *struct {
			Salesorders *[]SalesOrder `json:"salesorders,omitempty"`
		} `json:"_embedded,omitempty"`
	}
	JSON200 *[]SalesOrder
}

// Status returns HTTPResponse.Status
func (r GetSalesordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesordersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SalesOrder
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostSalesordersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesordersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesordersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *struct {
		UnderscoreEmbedded *struct {
			Lines *[]Line `json:"lines,omitempty"`
		} `json:"_embedded,omitempty"`

		// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
		CreatedAt *time.Time `json:"createdAt,omitempty"`

		// Customer Customer details for the sales order. Note that the `customer` object for the `/salesOrders` endpoint is not the same as the customer that can be retrieved from the `/customers` endpoint, even though both share the same ID reference and their schemas are similar. The `customer` object in the context of `/salesOrders` contains the customer details as they were at the time the sales order was created. In contrast, the `/customers` endpoint always provides the latest state values for the customer properties.
		Customer *Customer `json:"customer,omitempty"`

		// Date The date when the sales order was issued.
		Date *openapi_types.Date `json:"date,omitempty"`

		// DeliveryCustomer Delivery details for the sales order.
		DeliveryCustomer *DeliveryCustomer `json:"deliveryCustomer,omitempty"`

		// Dimensions A list of dimensions and dimension values associated with the sales order, such as department or project.
		Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

		// Id A unique identifier for the sales order within 24SevenOffice ERP.
		Id *int `json:"id,omitempty"`

		// InternalMemo An internal memo for the sales order.
		InternalMemo *string `json:"internalMemo,omitempty"`

		// InvoiceWithTransaction Details of an invoice associated with a sales order.
		InvoiceWithTransaction *InvoiceWithTransaction `json:"invoice,omitempty"`

		// Memo A memo or comments for the sales order.
		Memo *string `json:"memo,omitempty"`

		// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
		ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

		// SalesType The sales type for the sales order.
		SalesType *SalesTypeDto `json:"salesType,omitempty"`

		// Status Current status of the sales order.
		Status *SalesOrderStatusEnum `json:"status,omitempty"`
	}
	JSON200 *SalesOrder
}

// Status returns HTTPResponse.Status
func (r GetSalesordersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesordersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSalesordersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *SalesOrder
	JSON200      *SalesOrder
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PatchSalesordersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSalesordersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesordersIdLinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Line
}

// Status returns HTTPResponse.Status
func (r GetSalesordersIdLinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesordersIdLinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSalesordersIdLinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Line
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostSalesordersIdLinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSalesordersIdLinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalesordersIdLinesLineIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Line
}

// Status returns HTTPResponse.Status
func (r GetSalesordersIdLinesLineIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalesordersIdLinesLineIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSalesordersIdLinesLineIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Line
	JSON400      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PatchSalesordersIdLinesLineIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSalesordersIdLinesLineIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalestypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SalesType
}

// Status returns HTTPResponse.Status
func (r GetSalestypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalestypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSalestypesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SalesType
}

// Status returns HTTPResponse.Status
func (r GetSalestypesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSalestypesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TaxResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaxesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TaxResponse
}

// Status returns HTTPResponse.Status
func (r GetTaxesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaxesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionlinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *[]Transaction
	JSON200      *[]Transaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionlinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionlinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionlinesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *Transaction
	JSON200      *Transaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionlinesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionlinesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactiontypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	HALJSON200   *TransactionTypes
	JSON200      *TransactionTypes
}

// Status returns HTTPResponse.Status
func (r GetTransactiontypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactiontypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountbalancesWithResponse request returning *GetAccountbalancesResponse
func (c *ClientWithResponses) GetAccountbalancesWithResponse(ctx context.Context, params *GetAccountbalancesParams, reqEditors ...RequestEditorFn) (*GetAccountbalancesResponse, error) {
	rsp, err := c.GetAccountbalances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountbalancesResponse(rsp)
}

// GetAccountbalancesIdWithResponse request returning *GetAccountbalancesIdResponse
func (c *ClientWithResponses) GetAccountbalancesIdWithResponse(ctx context.Context, id int, params *GetAccountbalancesIdParams, reqEditors ...RequestEditorFn) (*GetAccountbalancesIdResponse, error) {
	rsp, err := c.GetAccountbalancesId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountbalancesIdResponse(rsp)
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// GetAccountsIdWithResponse request returning *GetAccountsIdResponse
func (c *ClientWithResponses) GetAccountsIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetAccountsIdResponse, error) {
	rsp, err := c.GetAccountsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsIdResponse(rsp)
}

// GetBankaccountsWithResponse request returning *GetBankaccountsResponse
func (c *ClientWithResponses) GetBankaccountsWithResponse(ctx context.Context, params *GetBankaccountsParams, reqEditors ...RequestEditorFn) (*GetBankaccountsResponse, error) {
	rsp, err := c.GetBankaccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankaccountsResponse(rsp)
}

// PostBankaccountsWithBodyWithResponse request with arbitrary body returning *PostBankaccountsResponse
func (c *ClientWithResponses) PostBankaccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBankaccountsResponse, error) {
	rsp, err := c.PostBankaccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBankaccountsResponse(rsp)
}

func (c *ClientWithResponses) PostBankaccountsWithResponse(ctx context.Context, body PostBankaccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBankaccountsResponse, error) {
	rsp, err := c.PostBankaccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBankaccountsResponse(rsp)
}

// GetBankaccountsIdWithResponse request returning *GetBankaccountsIdResponse
func (c *ClientWithResponses) GetBankaccountsIdWithResponse(ctx context.Context, id string, params *GetBankaccountsIdParams, reqEditors ...RequestEditorFn) (*GetBankaccountsIdResponse, error) {
	rsp, err := c.GetBankaccountsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBankaccountsIdResponse(rsp)
}

// PostBankaccountsIdBalancesWithBodyWithResponse request with arbitrary body returning *PostBankaccountsIdBalancesResponse
func (c *ClientWithResponses) PostBankaccountsIdBalancesWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBankaccountsIdBalancesResponse, error) {
	rsp, err := c.PostBankaccountsIdBalancesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBankaccountsIdBalancesResponse(rsp)
}

func (c *ClientWithResponses) PostBankaccountsIdBalancesWithResponse(ctx context.Context, id string, body PostBankaccountsIdBalancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBankaccountsIdBalancesResponse, error) {
	rsp, err := c.PostBankaccountsIdBalances(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBankaccountsIdBalancesResponse(rsp)
}

// GetBanktransactionsWithResponse request returning *GetBanktransactionsResponse
func (c *ClientWithResponses) GetBanktransactionsWithResponse(ctx context.Context, params *GetBanktransactionsParams, reqEditors ...RequestEditorFn) (*GetBanktransactionsResponse, error) {
	rsp, err := c.GetBanktransactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBanktransactionsResponse(rsp)
}

// PostBanktransactionsWithBodyWithResponse request with arbitrary body returning *PostBanktransactionsResponse
func (c *ClientWithResponses) PostBanktransactionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBanktransactionsResponse, error) {
	rsp, err := c.PostBanktransactionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBanktransactionsResponse(rsp)
}

func (c *ClientWithResponses) PostBanktransactionsWithResponse(ctx context.Context, body PostBanktransactionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBanktransactionsResponse, error) {
	rsp, err := c.PostBanktransactions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBanktransactionsResponse(rsp)
}

// GetBanktransactionsBankTransactionReferenceWithResponse request returning *GetBanktransactionsBankTransactionReferenceResponse
func (c *ClientWithResponses) GetBanktransactionsBankTransactionReferenceWithResponse(ctx context.Context, bankTransactionReference string, reqEditors ...RequestEditorFn) (*GetBanktransactionsBankTransactionReferenceResponse, error) {
	rsp, err := c.GetBanktransactionsBankTransactionReference(ctx, bankTransactionReference, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBanktransactionsBankTransactionReferenceResponse(rsp)
}

// GetCurrenciesWithResponse request returning *GetCurrenciesResponse
func (c *ClientWithResponses) GetCurrenciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCurrenciesResponse, error) {
	rsp, err := c.GetCurrencies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCurrenciesResponse(rsp)
}

// GetCustomersWithResponse request returning *GetCustomersResponse
func (c *ClientWithResponses) GetCustomersWithResponse(ctx context.Context, params *GetCustomersParams, reqEditors ...RequestEditorFn) (*GetCustomersResponse, error) {
	rsp, err := c.GetCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersResponse(rsp)
}

// CreateCustomerWithBodyWithResponse request with arbitrary body returning *CreateCustomerResponse
func (c *ClientWithResponses) CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

// DeleteCustomersIdWithResponse request returning *DeleteCustomersIdResponse
func (c *ClientWithResponses) DeleteCustomersIdWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*DeleteCustomersIdResponse, error) {
	rsp, err := c.DeleteCustomersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomersIdResponse(rsp)
}

// GetCustomersIdWithResponse request returning *GetCustomersIdResponse
func (c *ClientWithResponses) GetCustomersIdWithResponse(ctx context.Context, id Id, reqEditors ...RequestEditorFn) (*GetCustomersIdResponse, error) {
	rsp, err := c.GetCustomersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersIdResponse(rsp)
}

// UpdateCustomerWithBodyWithResponse request with arbitrary body returning *UpdateCustomerResponse
func (c *ClientWithResponses) UpdateCustomerWithBodyWithResponse(ctx context.Context, id Id, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error) {
	rsp, err := c.UpdateCustomerWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomerWithResponse(ctx context.Context, id Id, body UpdateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerResponse, error) {
	rsp, err := c.UpdateCustomer(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, params *GetMeParams, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetMeIdentifiersWithResponse request returning *GetMeIdentifiersResponse
func (c *ClientWithResponses) GetMeIdentifiersWithResponse(ctx context.Context, params *GetMeIdentifiersParams, reqEditors ...RequestEditorFn) (*GetMeIdentifiersResponse, error) {
	rsp, err := c.GetMeIdentifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeIdentifiersResponse(rsp)
}

// GetMeIdentifiersIdWithResponse request returning *GetMeIdentifiersIdResponse
func (c *ClientWithResponses) GetMeIdentifiersIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMeIdentifiersIdResponse, error) {
	rsp, err := c.GetMeIdentifiersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeIdentifiersIdResponse(rsp)
}

// GetLicensesWithResponse request returning *GetLicensesResponse
func (c *ClientWithResponses) GetLicensesWithResponse(ctx context.Context, params *GetLicensesParams, reqEditors ...RequestEditorFn) (*GetLicensesResponse, error) {
	rsp, err := c.GetLicenses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLicensesResponse(rsp)
}

// GetMeLicensesIdOrganizationWithResponse request returning *GetMeLicensesIdOrganizationResponse
func (c *ClientWithResponses) GetMeLicensesIdOrganizationWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMeLicensesIdOrganizationResponse, error) {
	rsp, err := c.GetMeLicensesIdOrganization(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeLicensesIdOrganizationResponse(rsp)
}

// GetOrganizationWithResponse request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganizationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganization(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationResponse(rsp)
}

// GetOrganizationPeopleWithResponse request returning *GetOrganizationPeopleResponse
func (c *ClientWithResponses) GetOrganizationPeopleWithResponse(ctx context.Context, params *GetOrganizationPeopleParams, reqEditors ...RequestEditorFn) (*GetOrganizationPeopleResponse, error) {
	rsp, err := c.GetOrganizationPeople(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationPeopleResponse(rsp)
}

// GetOrganizationPeopleIdWithResponse request returning *GetOrganizationPeopleIdResponse
func (c *ClientWithResponses) GetOrganizationPeopleIdWithResponse(ctx context.Context, id int32, params *GetOrganizationPeopleIdParams, reqEditors ...RequestEditorFn) (*GetOrganizationPeopleIdResponse, error) {
	rsp, err := c.GetOrganizationPeopleId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationPeopleIdResponse(rsp)
}

// GetCategoriesWithResponse request returning *GetCategoriesResponse
func (c *ClientWithResponses) GetCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCategoriesResponse, error) {
	rsp, err := c.GetCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCategoriesResponse(rsp)
}

// CreateCategoryWithBodyWithResponse request with arbitrary body returning *CreateCategoryResponse
func (c *ClientWithResponses) CreateCategoryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategoryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

func (c *ClientWithResponses) CreateCategoryWithResponse(ctx context.Context, body CreateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCategoryResponse, error) {
	rsp, err := c.CreateCategory(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCategoryResponse(rsp)
}

// DeleteCategoryWithResponse request returning *DeleteCategoryResponse
func (c *ClientWithResponses) DeleteCategoryWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteCategoryResponse, error) {
	rsp, err := c.DeleteCategory(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCategoryResponse(rsp)
}

// GetProductcategoriesIdWithResponse request returning *GetProductcategoriesIdResponse
func (c *ClientWithResponses) GetProductcategoriesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetProductcategoriesIdResponse, error) {
	rsp, err := c.GetProductcategoriesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductcategoriesIdResponse(rsp)
}

// UpdateCategoryWithBodyWithResponse request with arbitrary body returning *UpdateCategoryResponse
func (c *ClientWithResponses) UpdateCategoryWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error) {
	rsp, err := c.UpdateCategoryWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCategoryResponse(rsp)
}

func (c *ClientWithResponses) UpdateCategoryWithResponse(ctx context.Context, id int32, body UpdateCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCategoryResponse, error) {
	rsp, err := c.UpdateCategory(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCategoryResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// CreateProductWithBodyWithResponse request with arbitrary body returning *CreateProductResponse
func (c *ClientWithResponses) CreateProductWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProductResponse, error) {
	rsp, err := c.CreateProductWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductResponse(rsp)
}

func (c *ClientWithResponses) CreateProductWithResponse(ctx context.Context, body CreateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProductResponse, error) {
	rsp, err := c.CreateProduct(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProductResponse(rsp)
}

// DeleteProductWithResponse request returning *DeleteProductResponse
func (c *ClientWithResponses) DeleteProductWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*DeleteProductResponse, error) {
	rsp, err := c.DeleteProduct(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProductResponse(rsp)
}

// GetProductsIdWithResponse request returning *GetProductsIdResponse
func (c *ClientWithResponses) GetProductsIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetProductsIdResponse, error) {
	rsp, err := c.GetProductsId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsIdResponse(rsp)
}

// UpdateProductWithBodyWithResponse request with arbitrary body returning *UpdateProductResponse
func (c *ClientWithResponses) UpdateProductWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error) {
	rsp, err := c.UpdateProductWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductResponse(rsp)
}

func (c *ClientWithResponses) UpdateProductWithResponse(ctx context.Context, id int32, body UpdateProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProductResponse, error) {
	rsp, err := c.UpdateProduct(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProductResponse(rsp)
}

// GetUnitsWithResponse request returning *GetUnitsResponse
func (c *ClientWithResponses) GetUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUnitsResponse, error) {
	rsp, err := c.GetUnits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnitsResponse(rsp)
}

// GetSalesordersWithResponse request returning *GetSalesordersResponse
func (c *ClientWithResponses) GetSalesordersWithResponse(ctx context.Context, params *GetSalesordersParams, reqEditors ...RequestEditorFn) (*GetSalesordersResponse, error) {
	rsp, err := c.GetSalesorders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesordersResponse(rsp)
}

// PostSalesordersWithBodyWithResponse request with arbitrary body returning *PostSalesordersResponse
func (c *ClientWithResponses) PostSalesordersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesordersResponse, error) {
	rsp, err := c.PostSalesordersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesordersResponse(rsp)
}

func (c *ClientWithResponses) PostSalesordersWithResponse(ctx context.Context, body PostSalesordersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesordersResponse, error) {
	rsp, err := c.PostSalesorders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesordersResponse(rsp)
}

// GetSalesordersIdWithResponse request returning *GetSalesordersIdResponse
func (c *ClientWithResponses) GetSalesordersIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdResponse, error) {
	rsp, err := c.GetSalesordersId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesordersIdResponse(rsp)
}

// PatchSalesordersIdWithBodyWithResponse request with arbitrary body returning *PatchSalesordersIdResponse
func (c *ClientWithResponses) PatchSalesordersIdWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSalesordersIdResponse, error) {
	rsp, err := c.PatchSalesordersIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSalesordersIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSalesordersIdWithResponse(ctx context.Context, id int32, body PatchSalesordersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSalesordersIdResponse, error) {
	rsp, err := c.PatchSalesordersId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSalesordersIdResponse(rsp)
}

// GetSalesordersIdLinesWithResponse request returning *GetSalesordersIdLinesResponse
func (c *ClientWithResponses) GetSalesordersIdLinesWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdLinesResponse, error) {
	rsp, err := c.GetSalesordersIdLines(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesordersIdLinesResponse(rsp)
}

// PostSalesordersIdLinesWithBodyWithResponse request with arbitrary body returning *PostSalesordersIdLinesResponse
func (c *ClientWithResponses) PostSalesordersIdLinesWithBodyWithResponse(ctx context.Context, id int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSalesordersIdLinesResponse, error) {
	rsp, err := c.PostSalesordersIdLinesWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesordersIdLinesResponse(rsp)
}

func (c *ClientWithResponses) PostSalesordersIdLinesWithResponse(ctx context.Context, id int32, body PostSalesordersIdLinesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSalesordersIdLinesResponse, error) {
	rsp, err := c.PostSalesordersIdLines(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSalesordersIdLinesResponse(rsp)
}

// GetSalesordersIdLinesLineIdWithResponse request returning *GetSalesordersIdLinesLineIdResponse
func (c *ClientWithResponses) GetSalesordersIdLinesLineIdWithResponse(ctx context.Context, id int32, lineId int32, reqEditors ...RequestEditorFn) (*GetSalesordersIdLinesLineIdResponse, error) {
	rsp, err := c.GetSalesordersIdLinesLineId(ctx, id, lineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalesordersIdLinesLineIdResponse(rsp)
}

// PatchSalesordersIdLinesLineIdWithBodyWithResponse request with arbitrary body returning *PatchSalesordersIdLinesLineIdResponse
func (c *ClientWithResponses) PatchSalesordersIdLinesLineIdWithBodyWithResponse(ctx context.Context, id int32, lineId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSalesordersIdLinesLineIdResponse, error) {
	rsp, err := c.PatchSalesordersIdLinesLineIdWithBody(ctx, id, lineId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSalesordersIdLinesLineIdResponse(rsp)
}

func (c *ClientWithResponses) PatchSalesordersIdLinesLineIdWithResponse(ctx context.Context, id int32, lineId int32, body PatchSalesordersIdLinesLineIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSalesordersIdLinesLineIdResponse, error) {
	rsp, err := c.PatchSalesordersIdLinesLineId(ctx, id, lineId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSalesordersIdLinesLineIdResponse(rsp)
}

// GetSalestypesWithResponse request returning *GetSalestypesResponse
func (c *ClientWithResponses) GetSalestypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSalestypesResponse, error) {
	rsp, err := c.GetSalestypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalestypesResponse(rsp)
}

// GetSalestypesIdWithResponse request returning *GetSalestypesIdResponse
func (c *ClientWithResponses) GetSalestypesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetSalestypesIdResponse, error) {
	rsp, err := c.GetSalestypesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSalestypesIdResponse(rsp)
}

// GetTaxesWithResponse request returning *GetTaxesResponse
func (c *ClientWithResponses) GetTaxesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaxesResponse, error) {
	rsp, err := c.GetTaxes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxesResponse(rsp)
}

// GetTaxesIdWithResponse request returning *GetTaxesIdResponse
func (c *ClientWithResponses) GetTaxesIdWithResponse(ctx context.Context, id int32, reqEditors ...RequestEditorFn) (*GetTaxesIdResponse, error) {
	rsp, err := c.GetTaxesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaxesIdResponse(rsp)
}

// GetTransactionlinesWithResponse request returning *GetTransactionlinesResponse
func (c *ClientWithResponses) GetTransactionlinesWithResponse(ctx context.Context, params *GetTransactionlinesParams, reqEditors ...RequestEditorFn) (*GetTransactionlinesResponse, error) {
	rsp, err := c.GetTransactionlines(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionlinesResponse(rsp)
}

// GetTransactionlinesIdWithResponse request returning *GetTransactionlinesIdResponse
func (c *ClientWithResponses) GetTransactionlinesIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTransactionlinesIdResponse, error) {
	rsp, err := c.GetTransactionlinesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionlinesIdResponse(rsp)
}

// GetTransactiontypesWithResponse request returning *GetTransactiontypesResponse
func (c *ClientWithResponses) GetTransactiontypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTransactiontypesResponse, error) {
	rsp, err := c.GetTransactiontypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactiontypesResponse(rsp)
}

// ParseGetAccountbalancesResponse parses an HTTP response from a GetAccountbalancesWithResponse call
func ParseGetAccountbalancesResponse(rsp *http.Response) (*GetAccountbalancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountbalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AggregationElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/hal) unsupported

	}

	return response, nil
}

// ParseGetAccountbalancesIdResponse parses an HTTP response from a GetAccountbalancesIdWithResponse call
func ParseGetAccountbalancesIdResponse(rsp *http.Response) (*GetAccountbalancesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountbalancesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AggregationElement
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/hal) unsupported

	}

	return response, nil
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountsIdResponse parses an HTTP response from a GetAccountsIdWithResponse call
func ParseGetAccountsIdResponse(rsp *http.Response) (*GetAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBankaccountsResponse parses an HTTP response from a GetBankaccountsWithResponse call
func ParseGetBankaccountsResponse(rsp *http.Response) (*GetBankaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BankAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBankaccountsResponse parses an HTTP response from a PostBankaccountsWithResponse call
func ParsePostBankaccountsResponse(rsp *http.Response) (*PostBankaccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBankaccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BankAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetBankaccountsIdResponse parses an HTTP response from a GetBankaccountsIdWithResponse call
func ParseGetBankaccountsIdResponse(rsp *http.Response) (*GetBankaccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBankaccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankAccountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBankaccountsIdBalancesResponse parses an HTTP response from a PostBankaccountsIdBalancesWithResponse call
func ParsePostBankaccountsIdBalancesResponse(rsp *http.Response) (*PostBankaccountsIdBalancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBankaccountsIdBalancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BankAccountBalanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetBanktransactionsResponse parses an HTTP response from a GetBanktransactionsWithResponse call
func ParseGetBanktransactionsResponse(rsp *http.Response) (*GetBanktransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBanktransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BankTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBanktransactionsResponse parses an HTTP response from a PostBanktransactionsWithResponse call
func ParsePostBanktransactionsResponse(rsp *http.Response) (*PostBanktransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBanktransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BankTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetBanktransactionsBankTransactionReferenceResponse parses an HTTP response from a GetBanktransactionsBankTransactionReferenceWithResponse call
func ParseGetBanktransactionsBankTransactionReferenceResponse(rsp *http.Response) (*GetBanktransactionsBankTransactionReferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBanktransactionsBankTransactionReferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BankTransactionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCurrenciesResponse parses an HTTP response from a GetCurrenciesWithResponse call
func ParseGetCurrenciesResponse(rsp *http.Response) (*GetCurrenciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCurrenciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest Currencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest Currencies
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCustomersResponse parses an HTTP response from a GetCustomersWithResponse call
func ParseGetCustomersResponse(rsp *http.Response) (*GetCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CustomerProperties
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCustomerResponse parses an HTTP response from a CreateCustomerWithResponse call
func ParseCreateCustomerResponse(rsp *http.Response) (*CreateCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCustomersIdResponse parses an HTTP response from a DeleteCustomersIdWithResponse call
func ParseDeleteCustomersIdResponse(rsp *http.Response) (*DeleteCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomersIdResponse parses an HTTP response from a GetCustomersIdWithResponse call
func ParseGetCustomersIdResponse(rsp *http.Response) (*GetCustomersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCustomerResponse parses an HTTP response from a UpdateCustomerWithResponse call
func ParseUpdateCustomerResponse(rsp *http.Response) (*UpdateCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CustomerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeIdentifiersResponse parses an HTTP response from a GetMeIdentifiersWithResponse call
func ParseGetMeIdentifiersResponse(rsp *http.Response) (*GetMeIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentifierModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeIdentifiersIdResponse parses an HTTP response from a GetMeIdentifiersIdWithResponse call
func ParseGetMeIdentifiersIdResponse(rsp *http.Response) (*GetMeIdentifiersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeIdentifiersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentifierModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetLicensesResponse parses an HTTP response from a GetLicensesWithResponse call
func ParseGetLicensesResponse(rsp *http.Response) (*GetLicensesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLicensesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LicenseModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMeLicensesIdOrganizationResponse parses an HTTP response from a GetMeLicensesIdOrganizationWithResponse call
func ParseGetMeLicensesIdOrganizationResponse(rsp *http.Response) (*GetMeLicensesIdOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeLicensesIdOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationModelShortend
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganizationWithResponse call
func ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOrganizationPeopleResponse parses an HTTP response from a GetOrganizationPeopleWithResponse call
func ParseGetOrganizationPeopleResponse(rsp *http.Response) (*GetOrganizationPeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TfsoApiOrganizationUnitOfWorkModelsPersonModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationPeopleIdResponse parses an HTTP response from a GetOrganizationPeopleIdWithResponse call
func ParseGetOrganizationPeopleIdResponse(rsp *http.Response) (*GetOrganizationPeopleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationPeopleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TfsoApiOrganizationUnitOfWorkModelsPersonModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetCategoriesResponse parses an HTTP response from a GetCategoriesWithResponse call
func ParseGetCategoriesResponse(rsp *http.Response) (*GetCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Categories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCategoryResponse parses an HTTP response from a CreateCategoryWithResponse call
func ParseCreateCategoryResponse(rsp *http.Response) (*CreateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCategoryResponse parses an HTTP response from a DeleteCategoryWithResponse call
func ParseDeleteCategoryResponse(rsp *http.Response) (*DeleteCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductcategoriesIdResponse parses an HTTP response from a GetProductcategoriesIdWithResponse call
func ParseGetProductcategoriesIdResponse(rsp *http.Response) (*GetProductcategoriesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductcategoriesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCategoryResponse parses an HTTP response from a UpdateCategoryWithResponse call
func ParseUpdateCategoryResponse(rsp *http.Response) (*UpdateCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CategoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Products
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProductResponse parses an HTTP response from a CreateProductWithResponse call
func ParseCreateProductResponse(rsp *http.Response) (*CreateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProductResponse parses an HTTP response from a DeleteProductWithResponse call
func ParseDeleteProductResponse(rsp *http.Response) (*DeleteProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProductsIdResponse parses an HTTP response from a GetProductsIdWithResponse call
func ParseGetProductsIdResponse(rsp *http.Response) (*GetProductsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProductResponse parses an HTTP response from a UpdateProductWithResponse call
func ParseUpdateProductResponse(rsp *http.Response) (*UpdateProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUnitsResponse parses an HTTP response from a GetUnitsWithResponse call
func ParseGetUnitsResponse(rsp *http.Response) (*GetUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Units
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSalesordersResponse parses an HTTP response from a GetSalesordersWithResponse call
func ParseGetSalesordersResponse(rsp *http.Response) (*GetSalesordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest struct {
			UnderscoreEmbedded *struct {
				Salesorders *[]SalesOrder `json:"salesorders,omitempty"`
			} `json:"_embedded,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []SalesOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSalesordersResponse parses an HTTP response from a PostSalesordersWithResponse call
func ParsePostSalesordersResponse(rsp *http.Response) (*PostSalesordersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesordersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SalesOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSalesordersIdResponse parses an HTTP response from a GetSalesordersIdWithResponse call
func ParseGetSalesordersIdResponse(rsp *http.Response) (*GetSalesordersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesordersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest struct {
			UnderscoreEmbedded *struct {
				Lines *[]Line `json:"lines,omitempty"`
			} `json:"_embedded,omitempty"`

			// CreatedAt A timestamp for when a record was created, in ISO 8601 format.
			CreatedAt *time.Time `json:"createdAt,omitempty"`

			// Customer Customer details for the sales order. Note that the `customer` object for the `/salesOrders` endpoint is not the same as the customer that can be retrieved from the `/customers` endpoint, even though both share the same ID reference and their schemas are similar. The `customer` object in the context of `/salesOrders` contains the customer details as they were at the time the sales order was created. In contrast, the `/customers` endpoint always provides the latest state values for the customer properties.
			Customer *Customer `json:"customer,omitempty"`

			// Date The date when the sales order was issued.
			Date *openapi_types.Date `json:"date,omitempty"`

			// DeliveryCustomer Delivery details for the sales order.
			DeliveryCustomer *DeliveryCustomer `json:"deliveryCustomer,omitempty"`

			// Dimensions A list of dimensions and dimension values associated with the sales order, such as department or project.
			Dimensions *[]DimensionDto `json:"dimensions,omitempty"`

			// Id A unique identifier for the sales order within 24SevenOffice ERP.
			Id *int `json:"id,omitempty"`

			// InternalMemo An internal memo for the sales order.
			InternalMemo *string `json:"internalMemo,omitempty"`

			// InvoiceWithTransaction Details of an invoice associated with a sales order.
			InvoiceWithTransaction *InvoiceWithTransaction `json:"invoice,omitempty"`

			// Memo A memo or comments for the sales order.
			Memo *string `json:"memo,omitempty"`

			// ModifiedAt A timestamp for when one of the properties of a record was last modified, in ISO 8601 format.
			ModifiedAt *time.Time `json:"modifiedAt,omitempty"`

			// SalesType The sales type for the sales order.
			SalesType *SalesTypeDto `json:"salesType,omitempty"`

			// Status Current status of the sales order.
			Status *SalesOrderStatusEnum `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest SalesOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSalesordersIdResponse parses an HTTP response from a PatchSalesordersIdWithResponse call
func ParsePatchSalesordersIdResponse(rsp *http.Response) (*PatchSalesordersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSalesordersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest SalesOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest SalesOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSalesordersIdLinesResponse parses an HTTP response from a GetSalesordersIdLinesWithResponse call
func ParseGetSalesordersIdLinesResponse(rsp *http.Response) (*GetSalesordersIdLinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesordersIdLinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Line
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSalesordersIdLinesResponse parses an HTTP response from a PostSalesordersIdLinesWithResponse call
func ParsePostSalesordersIdLinesResponse(rsp *http.Response) (*PostSalesordersIdLinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSalesordersIdLinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Line
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSalesordersIdLinesLineIdResponse parses an HTTP response from a GetSalesordersIdLinesLineIdWithResponse call
func ParseGetSalesordersIdLinesLineIdResponse(rsp *http.Response) (*GetSalesordersIdLinesLineIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalesordersIdLinesLineIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Line
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchSalesordersIdLinesLineIdResponse parses an HTTP response from a PatchSalesordersIdLinesLineIdWithResponse call
func ParsePatchSalesordersIdLinesLineIdResponse(rsp *http.Response) (*PatchSalesordersIdLinesLineIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSalesordersIdLinesLineIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Line
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSalestypesResponse parses an HTTP response from a GetSalestypesWithResponse call
func ParseGetSalestypesResponse(rsp *http.Response) (*GetSalestypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalestypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SalesType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSalestypesIdResponse parses an HTTP response from a GetSalestypesIdWithResponse call
func ParseGetSalestypesIdResponse(rsp *http.Response) (*GetSalestypesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSalestypesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SalesType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxesResponse parses an HTTP response from a GetTaxesWithResponse call
func ParseGetTaxesResponse(rsp *http.Response) (*GetTaxesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TaxResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaxesIdResponse parses an HTTP response from a GetTaxesIdWithResponse call
func ParseGetTaxesIdResponse(rsp *http.Response) (*GetTaxesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaxesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TaxResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionlinesResponse parses an HTTP response from a GetTransactionlinesWithResponse call
func ParseGetTransactionlinesResponse(rsp *http.Response) (*GetTransactionlinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionlinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest []Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest []Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionlinesIdResponse parses an HTTP response from a GetTransactionlinesIdWithResponse call
func ParseGetTransactionlinesIdResponse(rsp *http.Response) (*GetTransactionlinesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionlinesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest Transaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactiontypesResponse parses an HTTP response from a GetTransactiontypesWithResponse call
func ParseGetTransactiontypesResponse(rsp *http.Response) (*GetTransactiontypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactiontypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case rsp.Header.Get("Content-Type") == "application/hal+json" && rsp.StatusCode == 200:
		var dest TransactionTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.HALJSON200 = &dest

	case rsp.Header.Get("Content-Type") == "application/json" && rsp.StatusCode == 200:
		var dest TransactionTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
