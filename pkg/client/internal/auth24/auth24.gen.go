// Code generated by gowsdl DO NOT EDIT.

package auth24

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type AuthenticateByToken struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices AuthenticateByToken"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`
}

type AuthenticateByTokenResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices AuthenticateByTokenResponse"`

	AuthenticateByTokenResult *Passport `xml:"AuthenticateByTokenResult,omitempty" json:"AuthenticateByTokenResult,omitempty"`
}

type Login struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices Login"`

	Credential *Credential `xml:"credential,omitempty" json:"credential,omitempty"`
}

type LoginResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices LoginResponse"`

	LoginResult string `xml:"LoginResult,omitempty" json:"LoginResult,omitempty"`
}

type HasSession struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices HasSession"`
}

type HasSessionResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices HasSessionResponse"`

	HasSessionResult bool `xml:"HasSessionResult,omitempty" json:"HasSessionResult,omitempty"`
}

type GetIdentity struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentity"`
}

type GetIdentityResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentityResponse"`

	GetIdentityResult *Identity `xml:"GetIdentityResult,omitempty" json:"GetIdentityResult,omitempty"`
}

type GetIdentities struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentities"`
}

type GetIdentitiesResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentitiesResponse"`

	GetIdentitiesResult *ArrayOfIdentity `xml:"GetIdentitiesResult,omitempty" json:"GetIdentitiesResult,omitempty"`
}

type SetIdentity struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices SetIdentity"`

	Identity *Identity `xml:"identity,omitempty" json:"identity,omitempty"`
}

type SetIdentityResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices SetIdentityResponse"`

	SetIdentityResult bool `xml:"SetIdentityResult,omitempty" json:"SetIdentityResult,omitempty"`
}

type SetIdentityById struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices SetIdentityById"`

	IdentityId *Guid `xml:"identityId,omitempty" json:"identityId,omitempty"`
}

type SetIdentityByIdResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices SetIdentityByIdResponse"`

	SetIdentityByIdResult bool `xml:"SetIdentityByIdResult,omitempty" json:"SetIdentityByIdResult,omitempty"`
}

type GetIdentitiesWithCredential struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentitiesWithCredential"`

	Credential *Credential `xml:"credential,omitempty" json:"credential,omitempty"`
}

type GetIdentitiesWithCredentialResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentitiesWithCredentialResponse"`

	GetIdentitiesWithCredentialResult *ArrayOfIdentity `xml:"GetIdentitiesWithCredentialResult,omitempty" json:"GetIdentitiesWithCredentialResult,omitempty"`
}

type GetIdentitiesWithCredentialByService struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentitiesWithCredentialByService"`

	Credential *Credential `xml:"credential,omitempty" json:"credential,omitempty"`

	ServiceId int32 `xml:"serviceId,omitempty" json:"serviceId,omitempty"`
}

type GetIdentitiesWithCredentialByServiceResponse struct {
	XMLName xml.Name `xml:"http://24sevenOffice.com/webservices GetIdentitiesWithCredentialByServiceResponse"`

	GetIdentitiesWithCredentialByServiceResult *ArrayOfIdentity `xml:"GetIdentitiesWithCredentialByServiceResult,omitempty" json:"GetIdentitiesWithCredentialByServiceResult,omitempty"`
}

type Token struct {
	ApplicationId *Guid `xml:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	Id *Guid `xml:"Id,omitempty" json:"Id,omitempty"`
}

type Passport struct {
	Id *Guid `xml:"Id,omitempty" json:"Id,omitempty"`

	Email string `xml:"Email,omitempty" json:"Email,omitempty"`

	Identities *ArrayOfIdentity `xml:"Identities,omitempty" json:"Identities,omitempty"`

	SessionId string `xml:"SessionId,omitempty" json:"SessionId,omitempty"`
}

type ArrayOfIdentity struct {
	Identity []*Identity `xml:"Identity,omitempty" json:"Identity,omitempty"`
}

type Identity struct {
	Id *Guid `xml:"Id,omitempty" json:"Id,omitempty"`

	User *User `xml:"User,omitempty" json:"User,omitempty"`

	Client *Client `xml:"Client,omitempty" json:"Client,omitempty"`

	IsCurrent bool `xml:"IsCurrent,omitempty" json:"IsCurrent,omitempty"`

	IsDefault bool `xml:"IsDefault,omitempty" json:"IsDefault,omitempty"`

	IsProtected bool `xml:"IsProtected,omitempty" json:"IsProtected,omitempty"`

	Servers *ArrayOfServer `xml:"Servers,omitempty" json:"Servers,omitempty"`

	IsDisabled bool `xml:"IsDisabled,omitempty" json:"IsDisabled,omitempty"`
}

type User struct {
	ContactId int32 `xml:"ContactId,omitempty" json:"ContactId,omitempty"`

	Id *Guid `xml:"Id,omitempty" json:"Id,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`

	EmployeeId int32 `xml:"EmployeeId,omitempty" json:"EmployeeId,omitempty"`
}

type Client struct {
	Id int64 `xml:"Id,omitempty" json:"Id,omitempty"`

	Name string `xml:"Name,omitempty" json:"Name,omitempty"`
}

type ArrayOfServer struct {
	Server []*Server `xml:"Server,omitempty" json:"Server,omitempty"`
}

type Server struct {
	Id int32 `xml:"Id,omitempty" json:"Id,omitempty"`

	Type int32 `xml:"Type,omitempty" json:"Type,omitempty"`
}

type Credential struct {
	ApplicationId *Guid `xml:"ApplicationId,omitempty" json:"ApplicationId,omitempty"`

	IdentityId *Guid `xml:"IdentityId,omitempty" json:"IdentityId,omitempty"`

	Password string `xml:"Password,omitempty" json:"Password,omitempty"`

	Username string `xml:"Username,omitempty" json:"Username,omitempty"`
}

type Guid string

type AuthenticateSoap interface {

	/* Authenticate the passed credentials, if it is successful it will return the session id for the cookie parameter 'ASP.NET_SessionId', otherwise an empty string. */
	AuthenticateByToken(request *AuthenticateByToken) (*AuthenticateByTokenResponse, error)

	AuthenticateByTokenContext(ctx context.Context, request *AuthenticateByToken) (*AuthenticateByTokenResponse, error)

	/* Authenticate the passed credentials, if it is successful it will return the session id for the cookie parameter 'ASP.NET_SessionId', otherwise an empty string. */
	Login(request *Login) (*LoginResponse, error)

	LoginContext(ctx context.Context, request *Login) (*LoginResponse, error)

	/* Return whether your current session is authenticated or not. */
	HasSession(request *HasSession) (*HasSessionResponse, error)

	HasSessionContext(ctx context.Context, request *HasSession) (*HasSessionResponse, error)

	/* Get the current identity */
	GetIdentity(request *GetIdentity) (*GetIdentityResponse, error)

	GetIdentityContext(ctx context.Context, request *GetIdentity) (*GetIdentityResponse, error)

	/* Get a list of available identities for this session if authenticated as community. */
	GetIdentities(request *GetIdentities) (*GetIdentitiesResponse, error)

	GetIdentitiesContext(ctx context.Context, request *GetIdentities) (*GetIdentitiesResponse, error)

	/* Set the current map for the communitiy session. Returns whether it is successful or not. */
	SetIdentity(request *SetIdentity) (*SetIdentityResponse, error)

	SetIdentityContext(ctx context.Context, request *SetIdentity) (*SetIdentityResponse, error)

	/* Set the current map by an identity for the communitiy session. Returns whether it is successful or not. */
	SetIdentityById(request *SetIdentityById) (*SetIdentityByIdResponse, error)

	SetIdentityByIdContext(ctx context.Context, request *SetIdentityById) (*SetIdentityByIdResponse, error)

	/* Get a list of identities for the passed credentials. */
	GetIdentitiesWithCredential(request *GetIdentitiesWithCredential) (*GetIdentitiesWithCredentialResponse, error)

	GetIdentitiesWithCredentialContext(ctx context.Context, request *GetIdentitiesWithCredential) (*GetIdentitiesWithCredentialResponse, error)

	/* Get a list of identities for the passed credentials and specified serviceId */
	GetIdentitiesWithCredentialByService(request *GetIdentitiesWithCredentialByService) (*GetIdentitiesWithCredentialByServiceResponse, error)

	GetIdentitiesWithCredentialByServiceContext(ctx context.Context, request *GetIdentitiesWithCredentialByService) (*GetIdentitiesWithCredentialByServiceResponse, error)
}

type authenticateSoap struct {
	client *soap.Client
}

func NewAuthenticateSoap(client *soap.Client) AuthenticateSoap {
	return &authenticateSoap{
		client: client,
	}
}

func (service *authenticateSoap) AuthenticateByTokenContext(ctx context.Context, request *AuthenticateByToken) (*AuthenticateByTokenResponse, error) {
	response := new(AuthenticateByTokenResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/AuthenticateByToken", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) AuthenticateByToken(request *AuthenticateByToken) (*AuthenticateByTokenResponse, error) {
	return service.AuthenticateByTokenContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) LoginContext(ctx context.Context, request *Login) (*LoginResponse, error) {
	response := new(LoginResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/Login", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) Login(request *Login) (*LoginResponse, error) {
	return service.LoginContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) HasSessionContext(ctx context.Context, request *HasSession) (*HasSessionResponse, error) {
	response := new(HasSessionResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/HasSession", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) HasSession(request *HasSession) (*HasSessionResponse, error) {
	return service.HasSessionContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) GetIdentityContext(ctx context.Context, request *GetIdentity) (*GetIdentityResponse, error) {
	response := new(GetIdentityResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/GetIdentity", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) GetIdentity(request *GetIdentity) (*GetIdentityResponse, error) {
	return service.GetIdentityContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) GetIdentitiesContext(ctx context.Context, request *GetIdentities) (*GetIdentitiesResponse, error) {
	response := new(GetIdentitiesResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/GetIdentities", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) GetIdentities(request *GetIdentities) (*GetIdentitiesResponse, error) {
	return service.GetIdentitiesContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) SetIdentityContext(ctx context.Context, request *SetIdentity) (*SetIdentityResponse, error) {
	response := new(SetIdentityResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/SetIdentity", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) SetIdentity(request *SetIdentity) (*SetIdentityResponse, error) {
	return service.SetIdentityContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) SetIdentityByIdContext(ctx context.Context, request *SetIdentityById) (*SetIdentityByIdResponse, error) {
	response := new(SetIdentityByIdResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/SetIdentityById", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) SetIdentityById(request *SetIdentityById) (*SetIdentityByIdResponse, error) {
	return service.SetIdentityByIdContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) GetIdentitiesWithCredentialContext(ctx context.Context, request *GetIdentitiesWithCredential) (*GetIdentitiesWithCredentialResponse, error) {
	response := new(GetIdentitiesWithCredentialResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/GetIdentitiesWithCredential", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) GetIdentitiesWithCredential(request *GetIdentitiesWithCredential) (*GetIdentitiesWithCredentialResponse, error) {
	return service.GetIdentitiesWithCredentialContext(
		context.Background(),
		request,
	)
}

func (service *authenticateSoap) GetIdentitiesWithCredentialByServiceContext(ctx context.Context, request *GetIdentitiesWithCredentialByService) (*GetIdentitiesWithCredentialByServiceResponse, error) {
	response := new(GetIdentitiesWithCredentialByServiceResponse)
	err := service.client.CallContext(ctx, "http://24sevenOffice.com/webservices/GetIdentitiesWithCredentialByService", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *authenticateSoap) GetIdentitiesWithCredentialByService(request *GetIdentitiesWithCredentialByService) (*GetIdentitiesWithCredentialByServiceResponse, error) {
	return service.GetIdentitiesWithCredentialByServiceContext(
		context.Background(),
		request,
	)
}
