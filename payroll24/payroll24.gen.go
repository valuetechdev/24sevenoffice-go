// Package payroll24 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package payroll24

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APIKeyHeaderScopes = "APIKeyHeader.Scopes"
)

// Defines values for AbsenceTypeDTOCategory.
const (
	AbsenceTypeDTOCategoryLeaveOfAbsence AbsenceTypeDTOCategory = "leave_of_absence"
	AbsenceTypeDTOCategorySelfReport     AbsenceTypeDTOCategory = "self_report"
	AbsenceTypeDTOCategorySickChild      AbsenceTypeDTOCategory = "sick_child"
	AbsenceTypeDTOCategorySickness       AbsenceTypeDTOCategory = "sickness"
	AbsenceTypeDTOCategoryVacation       AbsenceTypeDTOCategory = "vacation"
)

// Defines values for EmployeeDTOSalaryType.
const (
	Hourly  EmployeeDTOSalaryType = "hourly"
	Monthly EmployeeDTOSalaryType = "monthly"
)

// Defines values for InternationalIDDTOType.
const (
	Passnummer              InternationalIDDTOType = "passnummer"
	SocialSecurityNumber    InternationalIDDTOType = "socialSecurityNumber"
	TaxIdentificationNumber InternationalIDDTOType = "taxIdentificationNumber"
	ValueAddedTaxNumber     InternationalIDDTOType = "valueAddedTaxNumber"
)

// Defines values for OrganizationDTOCountryCode.
const (
	NO OrganizationDTOCountryCode = "NO"
	SE OrganizationDTOCountryCode = "SE"
)

// Defines values for OrganizationDTOIndustry.
const (
	Godstransport OrganizationDTOIndustry = "godstransport"
	Lantbruk      OrganizationDTOIndustry = "lantbruk"
	Ordinarie     OrganizationDTOIndustry = "ordinarie"
	Sektorunntatt OrganizationDTOIndustry = "sektorunntatt"
)

// Defines values for OrganizationDTOTaxRule.
const (
	SkattefriOrganisasjon OrganizationDTOTaxRule = "skattefriOrganisasjon"
	Standard              OrganizationDTOTaxRule = "standard"
)

// Defines values for PayrollRunDTOType.
const (
	PayrollRunDTOTypeExtra    PayrollRunDTOType = "Extra"
	PayrollRunDTOTypeOrdinary PayrollRunDTOType = "Ordinary"
	PayrollRunDTOTypeUntilNow PayrollRunDTOType = "Until now"
	PayrollRunDTOTypeVacation PayrollRunDTOType = "Vacation"
)

// AbsenceDTO defines model for AbsenceDTO.
type AbsenceDTO struct {
	// AbsenceType Absence type code
	AbsenceType string `json:"absenceType,omitempty,omitzero"`

	// Approved Approved status
	Approved string `json:"approved,omitempty,omitzero"`

	// ChildId Child ID
	ChildId StringInt `json:"childId,omitempty,omitzero"`

	// Comment Comment
	Comment string `json:"comment,omitempty,omitzero"`

	// Description Absence type description
	Description string `json:"description,omitempty,omitzero"`

	// EmpId Employee ID
	EmpId StringInt `json:"empId,omitempty,omitzero"`

	// EndDate End date
	EndDate openapi_types.Date `json:"endDate,omitempty,omitzero"`

	// ExternalId External ID
	ExternalId StringInt `json:"externalId,omitempty,omitzero"`

	// LastChanged Last changed date
	LastChanged openapi_types.Date `json:"lastChanged,omitempty,omitzero"`

	// NumberOfDays Number of days
	NumberOfDays StringInt `json:"numberOfDays,omitempty,omitzero"`

	// Percent Absence percentage
	Percent StringFloat `json:"percent,omitempty,omitzero"`

	// PermisjonId Permission ID
	PermisjonId StringInt `json:"permisjonId,omitempty,omitzero"`

	// RequestDate Request date
	RequestDate openapi_types.Date `json:"requestDate,omitempty,omitzero"`

	// RequestMotivation Request motivation
	RequestMotivation string `json:"requestMotivation,omitempty,omitzero"`

	// SerialNo Serial number
	SerialNo string `json:"serialNo,omitempty,omitzero"`

	// StartDate Start date
	StartDate openapi_types.Date `json:"startDate,omitempty,omitzero"`

	// StartdateParental Parental leave start date
	StartdateParental openapi_types.Date `json:"startdateParental,omitempty,omitzero"`
}

// AbsenceTypeDTO defines model for AbsenceTypeDTO.
type AbsenceTypeDTO struct {
	Category AbsenceTypeDTOCategory `json:"category,omitempty,omitzero"`

	// Code Absence type code
	Code string `json:"code,omitempty,omitzero"`

	// CommentMandatory Comment mandatory
	CommentMandatory string `json:"comment_mandatory,omitempty,omitzero"`

	// Description Description
	Description string `json:"description,omitempty,omitzero"`

	// InntektsmeldingType Income report type
	InntektsmeldingType string `json:"inntektsmelding_type,omitempty,omitzero"`

	// LeaveOfAbsenceType Leave of absence type
	LeaveOfAbsenceType string `json:"leave_of_absence_type,omitempty,omitzero"`

	// Percentage Percentage supported
	Percentage StringFloat `json:"percentage,omitempty,omitzero"`

	// PermisjonId Permission ID required
	PermisjonId string `json:"permisjonId,omitempty,omitzero"`
}

// AbsenceTypeDTOCategory defines model for AbsenceTypeDTO.Category.
type AbsenceTypeDTOCategory string

// AccountingDTO defines model for AccountingDTO.
type AccountingDTO struct {
	Dimensions []DimensionDTO `json:"dimensions,omitempty,omitzero"`

	// Percentage Percentage
	Percentage StringFloat `json:"percentage,omitempty,omitzero"`
}

// ChildDTO defines model for ChildDTO.
type ChildDTO struct {
	// Birthdate Birth date
	Birthdate openapi_types.Date `json:"birthdate,omitempty,omitzero"`

	// ChildId Child ID
	ChildId StringInt `json:"childId,omitempty,omitzero"`

	// Firstnamn First name
	Firstnamn string `json:"firstnamn,omitempty,omitzero"`

	// Surname Surname
	Surname string `json:"surname,omitempty,omitzero"`
}

// DimensionDTO defines model for DimensionDTO.
type DimensionDTO struct {
	// Dimid Dimension ID
	Dimid StringInt `json:"dimid,omitempty,omitzero"`

	// Value Dimension value
	Value string `json:"value,omitempty,omitzero"`
}

// DimensionInfoDTO defines model for DimensionInfoDTO.
type DimensionInfoDTO struct {
	// Dimid Dimension ID
	Dimid StringInt `json:"dimid,omitempty,omitzero"`

	// Name Dimension name
	Name string `json:"name,omitempty,omitzero"`
}

// DimensionValueDTO defines model for DimensionValueDTO.
type DimensionValueDTO struct {
	// Active Active status
	Active StringBool `json:"active,omitempty,omitzero"`

	// Name Dimension value name
	Name string `json:"name,omitempty,omitzero"`

	// Value Dimension value
	Value string `json:"value,omitempty,omitzero"`
}

// EmployeeDTO defines model for EmployeeDTO.
type EmployeeDTO struct {
	// Account Bank account number
	Account    string          `json:"account,omitempty,omitzero"`
	Accounting []AccountingDTO `json:"accounting,omitempty,omitzero"`

	// Address Address
	Address string `json:"address,omitempty,omitzero"`

	// Bic BIC/SWIFT code
	Bic string `json:"bic,omitempty,omitzero"`

	// City City
	City string `json:"city,omitempty,omitzero"`

	// Clearingno Bank clearing number
	Clearingno string `json:"clearingno,omitempty,omitzero"`

	// ContinentalShelf Continental shelf
	ContinentalShelf StringBool `json:"continental_shelf,omitempty,omitzero"`

	// CountryCode Country code
	CountryCode string `json:"countryCode,omitempty,omitzero"`

	// Email Email address
	Email string `json:"email,omitempty,omitzero"`

	// EmailCopy Copy email address
	EmailCopy string `json:"email_copy,omitempty,omitzero"`

	// EmpId Employee number
	EmpId StringInt `json:"empId,omitempty,omitzero"`

	// EmployeeDate Employment start date
	EmployeeDate openapi_types.Date `json:"employee_date,omitempty,omitzero"`

	// EmploymentRate Employment rate percentage
	EmploymentRate StringFloat `json:"employment_rate,omitempty,omitzero"`

	// EmploymentRateValidFrom Employment rate valid from date
	EmploymentRateValidFrom string `json:"employment_rate_valid_from,omitempty,omitzero"`

	// Firstname First name
	Firstname string `json:"firstname,omitempty,omitzero"`

	// Hidden Hidden status
	Hidden StringBool `json:"hidden,omitempty,omitzero"`

	// HoursPerWeek Hours per week
	HoursPerWeek StringFloat `json:"hours_per_week,omitempty,omitzero"`

	// HoursPerWeekValidFrom Hours per week valid from date
	HoursPerWeekValidFrom string             `json:"hours_per_week_valid_from,omitempty,omitzero"`
	InternationalID       InternationalIDDTO `json:"internationalID,omitempty,omitzero"`

	// Lastname Last name
	Lastname string `json:"lastname,omitempty,omitzero"`

	// PercentageTaxBiEmployer Percentage tax bi employer
	PercentageTaxBiEmployer StringFloat `json:"percentage_tax_bi_employer,omitempty,omitzero"`

	// PercentageTaxMainEmployer Percentage tax main employer
	PercentageTaxMainEmployer StringFloat `json:"percentage_tax_main_employer,omitempty,omitzero"`

	// Personnr Personal number
	Personnr string `json:"personnr,omitempty,omitzero"`

	// Postaddress Post address
	Postaddress string `json:"postaddress,omitempty,omitzero"`

	// Postalcode Postal code
	Postalcode string `json:"postalcode,omitempty,omitzero"`

	// Salary Salary amount
	Salary     StringFloat           `json:"salary,omitempty,omitzero"`
	SalaryType EmployeeDTOSalaryType `json:"salary_type,omitempty,omitzero"`

	// SalaryValidFrom Salary valid from date
	SalaryValidFrom string `json:"salary_valid_from,omitempty,omitzero"`

	// TaxResidentCountry Tax resident country
	TaxResidentCountry string          `json:"tax_resident_country,omitempty,omitzero"`
	Taxexemption       TaxExemptionDTO `json:"taxexemption,omitempty,omitzero"`

	// Taxtable Tax table
	Taxtable string `json:"taxtable,omitempty,omitzero"`

	// Telefon Phone number
	Telefon string `json:"telefon,omitempty,omitzero"`

	// VacationDays Vacation days
	VacationDays StringInt `json:"vacation_days,omitempty,omitzero"`

	// VacationPercent Vacation percentage
	VacationPercent StringFloat `json:"vacation_percent,omitempty,omitzero"`

	// VacationPercentValidFrom Vacation percentage valid from date
	VacationPercentValidFrom string `json:"vacation_percent_valid_from,omitempty,omitzero"`

	// Zipcode Zip code
	Zipcode string `json:"zipcode,omitempty,omitzero"`
}

// EmployeeDTOSalaryType defines model for EmployeeDTO.SalaryType.
type EmployeeDTOSalaryType string

// EmploymentDTO defines model for EmploymentDTO.
type EmploymentDTO struct {
	// EmploymentForm Employment form
	EmploymentForm string `json:"employment_form,omitempty,omitzero"`

	// EmploymentId Employment ID
	EmploymentId StringInt `json:"employment_id,omitempty,omitzero"`

	// EmploymentRate Employment rate
	EmploymentRate StringFloat `json:"employment_rate,omitempty,omitzero"`

	// EmploymentType Employment type
	EmploymentType string `json:"employment_type,omitempty,omitzero"`

	// Enddate End date
	Enddate openapi_types.Date `json:"enddate,omitempty,omitzero"`

	// EnddateReason End date reason
	EnddateReason string `json:"enddate_reason,omitempty,omitzero"`

	// EnterpriseNumber Enterprise number
	EnterpriseNumber string `json:"enterprise_number,omitempty,omitzero"`

	// PrimaryEmployment Primary employment flag
	PrimaryEmployment StringBool `json:"primary_employment,omitempty,omitzero"`

	// ProfessionCode Profession code
	ProfessionCode string `json:"profession_code,omitempty,omitzero"`

	// Startdate Start date
	Startdate openapi_types.Date `json:"startdate,omitempty,omitzero"`

	// WorkingTimes Working times
	WorkingTimes string `json:"working_times,omitempty,omitzero"`
}

// InternationalIDDTO defines model for InternationalIDDTO.
type InternationalIDDTO struct {
	// ID ID value
	ID string `json:"ID,omitempty,omitzero"`

	// CountryCode Country code
	CountryCode string `json:"countryCode,omitempty,omitzero"`

	// Type Type of identifier
	Type InternationalIDDTOType `json:"type,omitempty,omitzero"`
}

// InternationalIDDTOType Type of identifier
type InternationalIDDTOType string

// OrganizationDTO defines model for OrganizationDTO.
type OrganizationDTO struct {
	// Address Address
	Address string `json:"address,omitempty,omitzero"`

	// BankAccount Bank account
	BankAccount string                     `json:"bank_account,omitempty,omitzero"`
	CountryCode OrganizationDTOCountryCode `json:"country_code,omitempty,omitzero"`

	// EnterpriseNumber Enterprise number
	EnterpriseNumber string                  `json:"enterprise_number,omitempty,omitzero"`
	Industry         OrganizationDTOIndustry `json:"industry,omitempty,omitzero"`

	// Name Company name
	Name string `json:"name,omitempty,omitzero"`

	// Orgno Organization number
	Orgno string `json:"orgno,omitempty,omitzero"`

	// RetirementAge Retirement age
	RetirementAge string `json:"retirement_age,omitempty,omitzero"`

	// TaxAccount Tax account
	TaxAccount string                 `json:"tax_account,omitempty,omitzero"`
	TaxRule    OrganizationDTOTaxRule `json:"tax_rule,omitempty,omitzero"`

	// TaxZone Tax zone
	TaxZone string `json:"tax_zone,omitempty,omitzero"`

	// Zipcode Zip code
	Zipcode string `json:"zipcode,omitempty,omitzero"`
}

// OrganizationDTOCountryCode defines model for OrganizationDTO.CountryCode.
type OrganizationDTOCountryCode string

// OrganizationDTOIndustry defines model for OrganizationDTO.Industry.
type OrganizationDTOIndustry string

// OrganizationDTOTaxRule defines model for OrganizationDTO.TaxRule.
type OrganizationDTOTaxRule string

// PaylineDTO defines model for PaylineDTO.
type PaylineDTO struct {
	// Amount Amount
	Amount StringFloat `json:"amount,omitempty,omitzero"`

	// Code Payroll code
	Code string `json:"code,omitempty,omitzero"`

	// Extent Extent
	Extent StringFloat `json:"extent,omitempty,omitzero"`

	// Quantity Quantity
	Quantity StringFloat `json:"quantity,omitempty,omitzero"`

	// Sumrow Whether this is a sum row
	Sumrow bool `json:"sumrow,omitempty,omitzero"`

	// Tax Tax type
	Tax string `json:"tax,omitempty,omitzero"`

	// Text Text description
	Text string `json:"text,omitempty,omitzero"`

	// UnitPrice Unit price
	UnitPrice StringFloat `json:"unitPrice,omitempty,omitzero"`
}

// PayrollRunDTO defines model for PayrollRunDTO.
type PayrollRunDTO struct {
	// Created Created date
	Created openapi_types.Date `json:"created,omitempty,omitzero"`

	// EndDate End date
	EndDate openapi_types.Date `json:"endDate,omitempty,omitzero"`

	// LimitDate Limit date
	LimitDate openapi_types.Date `json:"limitDate,omitempty,omitzero"`

	// Locked Locked status
	Locked string `json:"locked,omitempty,omitzero"`

	// Name Name
	Name string `json:"name,omitempty,omitzero"`

	// PaymentDate Payment date
	PaymentDate openapi_types.Date `json:"paymentDate,omitempty,omitzero"`

	// PayrollGroup Payroll group
	PayrollGroup string `json:"payrollGroup,omitempty,omitzero"`

	// PayrollrunId Payroll run ID
	PayrollrunId StringInt `json:"payrollrunId,omitempty,omitzero"`

	// Payslips Number of payslips
	Payslips StringInt `json:"payslips,omitempty,omitzero"`

	// StartDate Start date
	StartDate openapi_types.Date `json:"startDate,omitempty,omitzero"`
	Type      PayrollRunDTOType  `json:"type,omitempty,omitzero"`
}

// PayrollRunDTOType defines model for PayrollRunDTO.Type.
type PayrollRunDTOType string

// PayslipDTO defines model for PayslipDTO.
type PayslipDTO struct {
	// EndDate End date
	EndDate openapi_types.Date `json:"endDate,omitempty,omitzero"`

	// PayrollrunId Payroll run ID
	PayrollrunId StringInt `json:"payrollrunId,omitempty,omitzero"`

	// StartDate Start date
	StartDate openapi_types.Date `json:"startDate,omitempty,omitzero"`

	// Text Text representation of period
	Text string `json:"text,omitempty,omitzero"`
}

// PayslipJSONDTO defines model for PayslipJSONDTO.
type PayslipJSONDTO struct {
	// NetPay Net pay amount
	NetPay   StringFloat  `json:"netPay,omitempty,omitzero"`
	Paylines []PaylineDTO `json:"paylines,omitempty,omitzero"`

	// PaymentDate Payment date
	PaymentDate openapi_types.Date `json:"paymentDate,omitempty,omitzero"`

	// PayrollrunId Payroll run ID
	PayrollrunId StringInt `json:"payrollrunId,omitempty,omitzero"`
}

// TaxExemptionDTO defines model for TaxExemptionDTO.
type TaxExemptionDTO struct {
	// Amount Exemption amount
	Amount StringFloat `json:"amount,omitempty,omitzero"`

	// Percentage Exemption percentage
	Percentage StringFloat `json:"percentage,omitempty,omitzero"`
}

// TransactionDTO defines model for TransactionDTO.
type TransactionDTO struct {
	// Benefit Benefit
	Benefit string `json:"benefit,omitempty,omitzero"`

	// Counts Counts
	Counts StringFloat `json:"counts,omitempty,omitzero"`

	// Datefrom Date from
	Datefrom openapi_types.Date `json:"datefrom,omitempty,omitzero"`

	// Dateto Date to
	Dateto openapi_types.Date `json:"dateto,omitempty,omitzero"`

	// DepartmentId Department
	DepartmentId StringInt `json:"department,omitempty,omitzero"`

	// Description Description
	Description string `json:"description,omitempty,omitzero"`

	// EarningCountry Earning country
	EarningCountry string `json:"earning_country,omitempty,omitzero"`

	// EmpId Employee ID
	EmpId StringInt `json:"empId,omitempty,omitzero"`

	// Extent Extent
	Extent StringFloat `json:"extent,omitempty,omitzero"`

	// First60Days First 60 days
	First60Days StringBool `json:"first_60_days,omitempty,omitzero"`

	// IsPaid Is paid
	IsPaid StringBool `json:"is_paid,omitempty,omitzero"`

	// Note Note
	Note string `json:"note,omitempty,omitzero"`

	// Payrollcode Payroll code
	Payrollcode StringInt `json:"payrollcode,omitempty,omitzero"`

	// PayrollrunIds Payroll run IDs
	PayrollrunIds []int `json:"payrollrunIds,omitempty,omitzero"`

	// ProjectId Project
	ProjectId StringInt `json:"project,omitempty,omitzero"`

	// Repeating Repeating
	Repeating string `json:"repeating,omitempty,omitzero"`

	// SerialNo Serial number
	SerialNo StringInt `json:"serialNo,omitempty,omitzero"`

	// SocialSecurity Social security
	SocialSecurity string `json:"social_security,omitempty,omitzero"`

	// Tax Tax
	Tax string `json:"tax,omitempty,omitzero"`

	// TaxRule Tax rule
	TaxRule string `json:"tax_rule,omitempty,omitzero"`

	// Text Text
	Text string `json:"text,omitempty,omitzero"`

	// Unitprice Unit price
	Unitprice StringFloat `json:"unitprice,omitempty,omitzero"`

	// Vacation Vacation
	Vacation string `json:"vacation,omitempty,omitzero"`

	// WageDescription Wage description
	WageDescription string `json:"wage_description,omitempty,omitzero"`
}

// WageTypeDTO defines model for WageTypeDTO.
type WageTypeDTO struct {
	// Account Account
	Account string `json:"account,omitempty,omitzero"`

	// Antalstyp Amount type
	Antalstyp string `json:"antalstyp,omitempty,omitzero"`

	// Benefit Benefit
	Benefit string `json:"benefit,omitempty,omitzero"`

	// Beskrivning Description (Swedish)
	Beskrivning string `json:"beskrivning,omitempty,omitzero"`

	// Counteraccount Counter account
	Counteraccount string `json:"counteraccount,omitempty,omitzero"`

	// Description Description
	Description string `json:"description,omitempty,omitzero"`

	// EmployersFee Employers fee
	EmployersFee string `json:"employers_fee,omitempty,omitzero"`

	// Gruppid Group ID
	Gruppid StringInt `json:"gruppid,omitempty,omitzero"`

	// Hidden Hidden
	Hidden StringBool `json:"hidden,omitempty,omitzero"`

	// IsPaid Is paid
	IsPaid StringBool `json:"is_paid,omitempty,omitzero"`

	// Kalender Calendar
	Kalender string `json:"kalender,omitempty,omitzero"`

	// Loneart Wage type
	Loneart string `json:"loneart,omitempty,omitzero"`

	// Manadsavlonade Monthly salaried
	Manadsavlonade string `json:"manadsavlonade,omitempty,omitzero"`

	// Payrollcode Payroll code
	Payrollcode StringInt `json:"payrollcode,omitempty,omitzero"`

	// Selfservice Self service
	Selfservice string `json:"selfservice,omitempty,omitzero"`

	// Tax Tax
	Tax string `json:"tax,omitempty,omitzero"`

	// Timavlonade Hourly salaried
	Timavlonade string `json:"timavlonade,omitempty,omitzero"`

	// Unitprice Unit price
	Unitprice StringFloat `json:"unitprice,omitempty,omitzero"`

	// Vacation Vacation
	Vacation string `json:"vacation,omitempty,omitzero"`

	// WageDescription Wage description
	WageDescription string `json:"wage_description,omitempty,omitzero"`
}

// GetAuthParams defines parameters for GetAuth.
type GetAuthParams struct {
	// Token persistent token
	Token string `form:"token" json:"token"`
}

// PostChildV2JSONBody defines parameters for PostChildV2.
type PostChildV2JSONBody = string

// PostEmployeeV2JSONBody defines parameters for PostEmployeeV2.
type PostEmployeeV2JSONBody = string

// PostEmployeeV2EmpIdJSONBody defines parameters for PostEmployeeV2EmpId.
type PostEmployeeV2EmpIdJSONBody = string

// PostEmploymentV2EmpIdJSONBody defines parameters for PostEmploymentV2EmpId.
type PostEmploymentV2EmpIdJSONBody = string

// GetTransactionV2Params defines parameters for GetTransactionV2.
type GetTransactionV2Params struct {
	// PayrollrunId (lønnskjøringsnummer) ID of a payroll run
	PayrollrunId int `form:"payrollrunId,omitempty" json:"payrollrunId,omitempty,omitzero"`

	// EmpId (ansattnr) employee number
	EmpId int `form:"empId,omitempty" json:"empId,omitempty,omitzero"`

	// SerialNo internal ID of a transaction. Serial numbers are unique per employee
	SerialNo int `form:"serialNo,omitempty" json:"serialNo,omitempty,omitzero"`

	// Datefrom start date of the search interval. Format YYYY-MM-DD
	Datefrom string `form:"datefrom,omitempty" json:"datefrom,omitempty,omitzero"`

	// Dateto end date of the search interval. Format YYYY-MM-DD
	Dateto string `form:"dateto,omitempty" json:"dateto,omitempty,omitzero"`

	// Payrollcode (lønnsartkode) code to filter on a specific wage type
	Payrollcode string `form:"payrollcode,omitempty" json:"payrollcode,omitempty,omitzero"`

	// Tag filter result based on employee tag
	Tag string `form:"tag,omitempty" json:"tag,omitempty,omitzero"`

	// Department (avdeling) filter result based on employee department
	Department string `form:"department,omitempty" json:"department,omitempty,omitzero"`

	// SiteId (virksomhet) filter result based on employee site. Use /organization-endpoint to get siteId
	SiteId int `form:"siteId,omitempty" json:"siteId,omitempty,omitzero"`

	// Repeating (fast lønnspost) filter result based on repeating transactions
	Repeating bool `form:"repeating,omitempty" json:"repeating,omitempty,omitzero"`

	// Limit max number of result rows
	Limit int `form:"limit,omitempty" json:"limit,omitempty,omitzero"`
}

// PostTransactionV2JSONBody defines parameters for PostTransactionV2.
type PostTransactionV2JSONBody = string

// PostChildV2JSONRequestBody defines body for PostChildV2 for application/json ContentType.
type PostChildV2JSONRequestBody = PostChildV2JSONBody

// PostEmployeeV2JSONRequestBody defines body for PostEmployeeV2 for application/json ContentType.
type PostEmployeeV2JSONRequestBody = PostEmployeeV2JSONBody

// PostEmployeeV2EmpIdJSONRequestBody defines body for PostEmployeeV2EmpId for application/json ContentType.
type PostEmployeeV2EmpIdJSONRequestBody = PostEmployeeV2EmpIdJSONBody

// PostEmploymentV2EmpIdJSONRequestBody defines body for PostEmploymentV2EmpId for application/json ContentType.
type PostEmploymentV2EmpIdJSONRequestBody = PostEmploymentV2EmpIdJSONBody

// PostTransactionV2JSONRequestBody defines body for PostTransactionV2 for application/json ContentType.
type PostTransactionV2JSONRequestBody = PostTransactionV2JSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// WriteClient which conforms to the OpenAPI3 specification for this service.
type WriteClient struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*WriteClient) error

// Creates a new WriteClient, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*WriteClient, error) {
	// create a client with sane default values
	client := WriteClient{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *WriteClient) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *WriteClient) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAbsenceV2 request
	GetAbsenceV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAbsenceV2WithBody request with any body
	PostAbsenceV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsenceV2EmpId request
	GetAbsenceV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsencetypesV2 request
	GetAbsencetypesV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAbsencetypesV2Code request
	GetAbsencetypesV2Code(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuth request
	GetAuth(ctx context.Context, params *GetAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChildV2WithBody request with any body
	PostChildV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChildV2(ctx context.Context, body PostChildV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChildV2EmpId request
	GetChildV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDimensionV2 request
	GetDimensionV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDimensionV2Dimid request
	GetDimensionV2Dimid(ctx context.Context, dimid int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDimensionV2DimidWithBody request with any body
	PostDimensionV2DimidWithBody(ctx context.Context, dimid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDimensionV2DimidValue request
	GetDimensionV2DimidValue(ctx context.Context, dimid int, value string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeV2 request
	GetEmployeeV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmployeeV2WithBody request with any body
	PostEmployeeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmployeeV2(ctx context.Context, body PostEmployeeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmployeeV2EmpId request
	GetEmployeeV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmployeeV2EmpIdWithBody request with any body
	PostEmployeeV2EmpIdWithBody(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmployeeV2EmpId(ctx context.Context, empId int, body PostEmployeeV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEmploymentV2EmpId request
	GetEmploymentV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEmploymentV2EmpIdWithBody request with any body
	PostEmploymentV2EmpIdWithBody(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEmploymentV2EmpId(ctx context.Context, empId int, body PostEmploymentV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationV2 request
	GetOrganizationV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationV2WithBody request with any body
	PostOrganizationV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayrollrunV2 request
	GetPayrollrunV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayrollrunV2PayrollrunId request
	GetPayrollrunV2PayrollrunId(ctx context.Context, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayslipV2EmpId request
	GetPayslipV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayslipV2EmpIdPayrollrunId request
	GetPayslipV2EmpIdPayrollrunId(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayslipJSONV2EmpId request
	GetPayslipJSONV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayslipJSONV2EmpIdPayrollrunId request
	GetPayslipJSONV2EmpIdPayrollrunId(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayslipsV2EmpId request
	GetPayslipsV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionV2 request
	GetTransactionV2(ctx context.Context, params *GetTransactionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionV2WithBody request with any body
	PostTransactionV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionV2(ctx context.Context, body PostTransactionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWagetypesV2 request
	GetWagetypesV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWagetypesV2Payrollcode request
	GetWagetypesV2Payrollcode(ctx context.Context, payrollcode int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *WriteClient) GetAbsenceV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsenceV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostAbsenceV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAbsenceV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAbsenceV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsenceV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAbsencetypesV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsencetypesV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAbsencetypesV2Code(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAbsencetypesV2CodeRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetAuth(ctx context.Context, params *GetAuthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostChildV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChildV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostChildV2(ctx context.Context, body PostChildV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChildV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetChildV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChildV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetDimensionV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDimensionV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetDimensionV2Dimid(ctx context.Context, dimid int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDimensionV2DimidRequest(c.Server, dimid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostDimensionV2DimidWithBody(ctx context.Context, dimid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDimensionV2DimidRequestWithBody(c.Server, dimid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetDimensionV2DimidValue(ctx context.Context, dimid int, value string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDimensionV2DimidValueRequest(c.Server, dimid, value)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetEmployeeV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmployeeV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeeV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmployeeV2(ctx context.Context, body PostEmployeeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeeV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetEmployeeV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmployeeV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmployeeV2EmpIdWithBody(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeeV2EmpIdRequestWithBody(c.Server, empId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmployeeV2EmpId(ctx context.Context, empId int, body PostEmployeeV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmployeeV2EmpIdRequest(c.Server, empId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetEmploymentV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEmploymentV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmploymentV2EmpIdWithBody(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmploymentV2EmpIdRequestWithBody(c.Server, empId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostEmploymentV2EmpId(ctx context.Context, empId int, body PostEmploymentV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEmploymentV2EmpIdRequest(c.Server, empId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetOrganizationV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostOrganizationV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayrollrunV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayrollrunV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayrollrunV2PayrollrunId(ctx context.Context, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayrollrunV2PayrollrunIdRequest(c.Server, payrollrunId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayslipV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayslipV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayslipV2EmpIdPayrollrunId(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayslipV2EmpIdPayrollrunIdRequest(c.Server, empId, payrollrunId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayslipJSONV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayslipJSONV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayslipJSONV2EmpIdPayrollrunId(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayslipJSONV2EmpIdPayrollrunIdRequest(c.Server, empId, payrollrunId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetPayslipsV2EmpId(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayslipsV2EmpIdRequest(c.Server, empId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetTransactionV2(ctx context.Context, params *GetTransactionV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostTransactionV2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionV2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) PostTransactionV2(ctx context.Context, body PostTransactionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionV2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetWagetypesV2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWagetypesV2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *WriteClient) GetWagetypesV2Payrollcode(ctx context.Context, payrollcode int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWagetypesV2PayrollcodeRequest(c.Server, payrollcode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAbsenceV2Request generates requests for GetAbsenceV2
func NewGetAbsenceV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absence/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAbsenceV2RequestWithBody generates requests for PostAbsenceV2 with any type of body
func NewPostAbsenceV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absence/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAbsenceV2EmpIdRequest generates requests for GetAbsenceV2EmpId
func NewGetAbsenceV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absence/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAbsencetypesV2Request generates requests for GetAbsencetypesV2
func NewGetAbsencetypesV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absencetypes/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAbsencetypesV2CodeRequest generates requests for GetAbsencetypesV2Code
func NewGetAbsencetypesV2CodeRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/absencetypes/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthRequest generates requests for GetAuth
func NewGetAuthRequest(server string, params *GetAuthParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChildV2Request calls the generic PostChildV2 builder with application/json body
func NewPostChildV2Request(server string, body PostChildV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChildV2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostChildV2RequestWithBody generates requests for PostChildV2 with any type of body
func NewPostChildV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/child/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChildV2EmpIdRequest generates requests for GetChildV2EmpId
func NewGetChildV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/child/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDimensionV2Request generates requests for GetDimensionV2
func NewGetDimensionV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dimension/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDimensionV2DimidRequest generates requests for GetDimensionV2Dimid
func NewGetDimensionV2DimidRequest(server string, dimid int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dimid", runtime.ParamLocationPath, dimid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dimension/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDimensionV2DimidRequestWithBody generates requests for PostDimensionV2Dimid with any type of body
func NewPostDimensionV2DimidRequestWithBody(server string, dimid int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dimid", runtime.ParamLocationPath, dimid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dimension/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDimensionV2DimidValueRequest generates requests for GetDimensionV2DimidValue
func NewGetDimensionV2DimidValueRequest(server string, dimid int, value string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "dimid", runtime.ParamLocationPath, dimid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "value", runtime.ParamLocationPath, value)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dimension/v2/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEmployeeV2Request generates requests for GetEmployeeV2
func NewGetEmployeeV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeeV2Request calls the generic PostEmployeeV2 builder with application/json body
func NewPostEmployeeV2Request(server string, body PostEmployeeV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmployeeV2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostEmployeeV2RequestWithBody generates requests for PostEmployeeV2 with any type of body
func NewPostEmployeeV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmployeeV2EmpIdRequest generates requests for GetEmployeeV2EmpId
func NewGetEmployeeV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmployeeV2EmpIdRequest calls the generic PostEmployeeV2EmpId builder with application/json body
func NewPostEmployeeV2EmpIdRequest(server string, empId int, body PostEmployeeV2EmpIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmployeeV2EmpIdRequestWithBody(server, empId, "application/json", bodyReader)
}

// NewPostEmployeeV2EmpIdRequestWithBody generates requests for PostEmployeeV2EmpId with any type of body
func NewPostEmployeeV2EmpIdRequestWithBody(server string, empId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employee/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEmploymentV2EmpIdRequest generates requests for GetEmploymentV2EmpId
func NewGetEmploymentV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employment/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEmploymentV2EmpIdRequest calls the generic PostEmploymentV2EmpId builder with application/json body
func NewPostEmploymentV2EmpIdRequest(server string, empId int, body PostEmploymentV2EmpIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEmploymentV2EmpIdRequestWithBody(server, empId, "application/json", bodyReader)
}

// NewPostEmploymentV2EmpIdRequestWithBody generates requests for PostEmploymentV2EmpId with any type of body
func NewPostEmploymentV2EmpIdRequestWithBody(server string, empId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/employment/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationV2Request generates requests for GetOrganizationV2
func NewGetOrganizationV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationV2RequestWithBody generates requests for PostOrganizationV2 with any type of body
func NewPostOrganizationV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organization/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPayrollrunV2Request generates requests for GetPayrollrunV2
func NewGetPayrollrunV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payrollrun/v2/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayrollrunV2PayrollrunIdRequest generates requests for GetPayrollrunV2PayrollrunId
func NewGetPayrollrunV2PayrollrunIdRequest(server string, payrollrunId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payrollrunId", runtime.ParamLocationPath, payrollrunId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payrollrun/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayslipV2EmpIdRequest generates requests for GetPayslipV2EmpId
func NewGetPayslipV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payslip/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayslipV2EmpIdPayrollrunIdRequest generates requests for GetPayslipV2EmpIdPayrollrunId
func NewGetPayslipV2EmpIdPayrollrunIdRequest(server string, empId int, payrollrunId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "payrollrunId", runtime.ParamLocationPath, payrollrunId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payslip/v2/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayslipJSONV2EmpIdRequest generates requests for GetPayslipJSONV2EmpId
func NewGetPayslipJSONV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payslipJSON/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayslipJSONV2EmpIdPayrollrunIdRequest generates requests for GetPayslipJSONV2EmpIdPayrollrunId
func NewGetPayslipJSONV2EmpIdPayrollrunIdRequest(server string, empId int, payrollrunId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "payrollrunId", runtime.ParamLocationPath, payrollrunId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payslipJSON/v2/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayslipsV2EmpIdRequest generates requests for GetPayslipsV2EmpId
func NewGetPayslipsV2EmpIdRequest(server string, empId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "empId", runtime.ParamLocationPath, empId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payslips/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTransactionV2Request generates requests for GetTransactionV2
func NewGetTransactionV2Request(server string, params *GetTransactionV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transaction/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payrollrunId", runtime.ParamLocationQuery, params.PayrollrunId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "empId", runtime.ParamLocationQuery, params.EmpId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serialNo", runtime.ParamLocationQuery, params.SerialNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "datefrom", runtime.ParamLocationQuery, params.Datefrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateto", runtime.ParamLocationQuery, params.Dateto); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "payrollcode", runtime.ParamLocationQuery, params.Payrollcode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, params.Tag); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "department", runtime.ParamLocationQuery, params.Department); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, params.SiteId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "repeating", runtime.ParamLocationQuery, params.Repeating); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTransactionV2Request calls the generic PostTransactionV2 builder with application/json body
func NewPostTransactionV2Request(server string, body PostTransactionV2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionV2RequestWithBody(server, "application/json", bodyReader)
}

// NewPostTransactionV2RequestWithBody generates requests for PostTransactionV2 with any type of body
func NewPostTransactionV2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transaction/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWagetypesV2Request generates requests for GetWagetypesV2
func NewGetWagetypesV2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wagetypes/v2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWagetypesV2PayrollcodeRequest generates requests for GetWagetypesV2Payrollcode
func NewGetWagetypesV2PayrollcodeRequest(server string, payrollcode int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payrollcode", runtime.ParamLocationPath, payrollcode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wagetypes/v2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *WriteClient) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *WriteClient) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAbsenceV2WithResponse request
	GetAbsenceV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAbsenceV2Response, error)

	// PostAbsenceV2WithBodyWithResponse request with any body
	PostAbsenceV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAbsenceV2Response, error)

	// GetAbsenceV2EmpIdWithResponse request
	GetAbsenceV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetAbsenceV2EmpIdResponse, error)

	// GetAbsencetypesV2WithResponse request
	GetAbsencetypesV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAbsencetypesV2Response, error)

	// GetAbsencetypesV2CodeWithResponse request
	GetAbsencetypesV2CodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetAbsencetypesV2CodeResponse, error)

	// GetAuthWithResponse request
	GetAuthWithResponse(ctx context.Context, params *GetAuthParams, reqEditors ...RequestEditorFn) (*GetAuthResponse, error)

	// PostChildV2WithBodyWithResponse request with any body
	PostChildV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChildV2Response, error)

	PostChildV2WithResponse(ctx context.Context, body PostChildV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostChildV2Response, error)

	// GetChildV2EmpIdWithResponse request
	GetChildV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetChildV2EmpIdResponse, error)

	// GetDimensionV2WithResponse request
	GetDimensionV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDimensionV2Response, error)

	// GetDimensionV2DimidWithResponse request
	GetDimensionV2DimidWithResponse(ctx context.Context, dimid int, reqEditors ...RequestEditorFn) (*GetDimensionV2DimidResponse, error)

	// PostDimensionV2DimidWithBodyWithResponse request with any body
	PostDimensionV2DimidWithBodyWithResponse(ctx context.Context, dimid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDimensionV2DimidResponse, error)

	// GetDimensionV2DimidValueWithResponse request
	GetDimensionV2DimidValueWithResponse(ctx context.Context, dimid int, value string, reqEditors ...RequestEditorFn) (*GetDimensionV2DimidValueResponse, error)

	// GetEmployeeV2WithResponse request
	GetEmployeeV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmployeeV2Response, error)

	// PostEmployeeV2WithBodyWithResponse request with any body
	PostEmployeeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeV2Response, error)

	PostEmployeeV2WithResponse(ctx context.Context, body PostEmployeeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeeV2Response, error)

	// GetEmployeeV2EmpIdWithResponse request
	GetEmployeeV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetEmployeeV2EmpIdResponse, error)

	// PostEmployeeV2EmpIdWithBodyWithResponse request with any body
	PostEmployeeV2EmpIdWithBodyWithResponse(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeV2EmpIdResponse, error)

	PostEmployeeV2EmpIdWithResponse(ctx context.Context, empId int, body PostEmployeeV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeeV2EmpIdResponse, error)

	// GetEmploymentV2EmpIdWithResponse request
	GetEmploymentV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetEmploymentV2EmpIdResponse, error)

	// PostEmploymentV2EmpIdWithBodyWithResponse request with any body
	PostEmploymentV2EmpIdWithBodyWithResponse(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmploymentV2EmpIdResponse, error)

	PostEmploymentV2EmpIdWithResponse(ctx context.Context, empId int, body PostEmploymentV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmploymentV2EmpIdResponse, error)

	// GetOrganizationV2WithResponse request
	GetOrganizationV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationV2Response, error)

	// PostOrganizationV2WithBodyWithResponse request with any body
	PostOrganizationV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationV2Response, error)

	// GetPayrollrunV2WithResponse request
	GetPayrollrunV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPayrollrunV2Response, error)

	// GetPayrollrunV2PayrollrunIdWithResponse request
	GetPayrollrunV2PayrollrunIdWithResponse(ctx context.Context, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayrollrunV2PayrollrunIdResponse, error)

	// GetPayslipV2EmpIdWithResponse request
	GetPayslipV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipV2EmpIdResponse, error)

	// GetPayslipV2EmpIdPayrollrunIdWithResponse request
	GetPayslipV2EmpIdPayrollrunIdWithResponse(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayslipV2EmpIdPayrollrunIdResponse, error)

	// GetPayslipJSONV2EmpIdWithResponse request
	GetPayslipJSONV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipJSONV2EmpIdResponse, error)

	// GetPayslipJSONV2EmpIdPayrollrunIdWithResponse request
	GetPayslipJSONV2EmpIdPayrollrunIdWithResponse(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayslipJSONV2EmpIdPayrollrunIdResponse, error)

	// GetPayslipsV2EmpIdWithResponse request
	GetPayslipsV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipsV2EmpIdResponse, error)

	// GetTransactionV2WithResponse request
	GetTransactionV2WithResponse(ctx context.Context, params *GetTransactionV2Params, reqEditors ...RequestEditorFn) (*GetTransactionV2Response, error)

	// PostTransactionV2WithBodyWithResponse request with any body
	PostTransactionV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionV2Response, error)

	PostTransactionV2WithResponse(ctx context.Context, body PostTransactionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionV2Response, error)

	// GetWagetypesV2WithResponse request
	GetWagetypesV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWagetypesV2Response, error)

	// GetWagetypesV2PayrollcodeWithResponse request
	GetWagetypesV2PayrollcodeWithResponse(ctx context.Context, payrollcode int, reqEditors ...RequestEditorFn) (*GetWagetypesV2PayrollcodeResponse, error)
}

type GetAbsenceV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbsenceDTO
}

// Status returns HTTPResponse.Status
func (r GetAbsenceV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsenceV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAbsenceV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAbsenceV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAbsenceV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsenceV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbsenceDTO
}

// Status returns HTTPResponse.Status
func (r GetAbsenceV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsenceV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsencetypesV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbsenceTypeDTO
}

// Status returns HTTPResponse.Status
func (r GetAbsencetypesV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsencetypesV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAbsencetypesV2CodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbsenceTypeDTO
}

// Status returns HTTPResponse.Status
func (r GetAbsencetypesV2CodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAbsencetypesV2CodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChildV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostChildV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChildV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChildV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChildDTO
}

// Status returns HTTPResponse.Status
func (r GetChildV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChildV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDimensionV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DimensionInfoDTO
}

// Status returns HTTPResponse.Status
func (r GetDimensionV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDimensionV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDimensionV2DimidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DimensionValueDTO
}

// Status returns HTTPResponse.Status
func (r GetDimensionV2DimidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDimensionV2DimidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDimensionV2DimidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDimensionV2DimidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDimensionV2DimidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDimensionV2DimidValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]DimensionValueDTO
}

// Status returns HTTPResponse.Status
func (r GetDimensionV2DimidValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDimensionV2DimidValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmployeeDTO
}

// Status returns HTTPResponse.Status
func (r GetEmployeeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeeV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmployeeV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeeV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmployeeV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmployeeDTO
}

// Status returns HTTPResponse.Status
func (r GetEmployeeV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmployeeV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmployeeV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmployeeV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmployeeV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEmploymentV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmploymentDTO
}

// Status returns HTTPResponse.Status
func (r GetEmploymentV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEmploymentV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEmploymentV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEmploymentV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEmploymentV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationDTO
}

// Status returns HTTPResponse.Status
func (r GetOrganizationV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayrollrunV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayrollRunDTO
}

// Status returns HTTPResponse.Status
func (r GetPayrollrunV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayrollrunV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayrollrunV2PayrollrunIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayrollRunDTO
}

// Status returns HTTPResponse.Status
func (r GetPayrollrunV2PayrollrunIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayrollrunV2PayrollrunIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayslipV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPayslipV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayslipV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayslipV2EmpIdPayrollrunIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPayslipV2EmpIdPayrollrunIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayslipV2EmpIdPayrollrunIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayslipJSONV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayslipJSONDTO
}

// Status returns HTTPResponse.Status
func (r GetPayslipJSONV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayslipJSONV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayslipJSONV2EmpIdPayrollrunIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayslipJSONDTO
}

// Status returns HTTPResponse.Status
func (r GetPayslipJSONV2EmpIdPayrollrunIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayslipJSONV2EmpIdPayrollrunIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayslipsV2EmpIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PayslipDTO
}

// Status returns HTTPResponse.Status
func (r GetPayslipsV2EmpIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayslipsV2EmpIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TransactionDTO
}

// Status returns HTTPResponse.Status
func (r GetTransactionV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTransactionV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWagetypesV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WageTypeDTO
}

// Status returns HTTPResponse.Status
func (r GetWagetypesV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWagetypesV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWagetypesV2PayrollcodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]WageTypeDTO
}

// Status returns HTTPResponse.Status
func (r GetWagetypesV2PayrollcodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWagetypesV2PayrollcodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAbsenceV2WithResponse request returning *GetAbsenceV2Response
func (c *ClientWithResponses) GetAbsenceV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAbsenceV2Response, error) {
	rsp, err := c.GetAbsenceV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsenceV2Response(rsp)
}

// PostAbsenceV2WithBodyWithResponse request with arbitrary body returning *PostAbsenceV2Response
func (c *ClientWithResponses) PostAbsenceV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAbsenceV2Response, error) {
	rsp, err := c.PostAbsenceV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAbsenceV2Response(rsp)
}

// GetAbsenceV2EmpIdWithResponse request returning *GetAbsenceV2EmpIdResponse
func (c *ClientWithResponses) GetAbsenceV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetAbsenceV2EmpIdResponse, error) {
	rsp, err := c.GetAbsenceV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsenceV2EmpIdResponse(rsp)
}

// GetAbsencetypesV2WithResponse request returning *GetAbsencetypesV2Response
func (c *ClientWithResponses) GetAbsencetypesV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAbsencetypesV2Response, error) {
	rsp, err := c.GetAbsencetypesV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsencetypesV2Response(rsp)
}

// GetAbsencetypesV2CodeWithResponse request returning *GetAbsencetypesV2CodeResponse
func (c *ClientWithResponses) GetAbsencetypesV2CodeWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*GetAbsencetypesV2CodeResponse, error) {
	rsp, err := c.GetAbsencetypesV2Code(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAbsencetypesV2CodeResponse(rsp)
}

// GetAuthWithResponse request returning *GetAuthResponse
func (c *ClientWithResponses) GetAuthWithResponse(ctx context.Context, params *GetAuthParams, reqEditors ...RequestEditorFn) (*GetAuthResponse, error) {
	rsp, err := c.GetAuth(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthResponse(rsp)
}

// PostChildV2WithBodyWithResponse request with arbitrary body returning *PostChildV2Response
func (c *ClientWithResponses) PostChildV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChildV2Response, error) {
	rsp, err := c.PostChildV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChildV2Response(rsp)
}

func (c *ClientWithResponses) PostChildV2WithResponse(ctx context.Context, body PostChildV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostChildV2Response, error) {
	rsp, err := c.PostChildV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChildV2Response(rsp)
}

// GetChildV2EmpIdWithResponse request returning *GetChildV2EmpIdResponse
func (c *ClientWithResponses) GetChildV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetChildV2EmpIdResponse, error) {
	rsp, err := c.GetChildV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChildV2EmpIdResponse(rsp)
}

// GetDimensionV2WithResponse request returning *GetDimensionV2Response
func (c *ClientWithResponses) GetDimensionV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDimensionV2Response, error) {
	rsp, err := c.GetDimensionV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDimensionV2Response(rsp)
}

// GetDimensionV2DimidWithResponse request returning *GetDimensionV2DimidResponse
func (c *ClientWithResponses) GetDimensionV2DimidWithResponse(ctx context.Context, dimid int, reqEditors ...RequestEditorFn) (*GetDimensionV2DimidResponse, error) {
	rsp, err := c.GetDimensionV2Dimid(ctx, dimid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDimensionV2DimidResponse(rsp)
}

// PostDimensionV2DimidWithBodyWithResponse request with arbitrary body returning *PostDimensionV2DimidResponse
func (c *ClientWithResponses) PostDimensionV2DimidWithBodyWithResponse(ctx context.Context, dimid int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDimensionV2DimidResponse, error) {
	rsp, err := c.PostDimensionV2DimidWithBody(ctx, dimid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDimensionV2DimidResponse(rsp)
}

// GetDimensionV2DimidValueWithResponse request returning *GetDimensionV2DimidValueResponse
func (c *ClientWithResponses) GetDimensionV2DimidValueWithResponse(ctx context.Context, dimid int, value string, reqEditors ...RequestEditorFn) (*GetDimensionV2DimidValueResponse, error) {
	rsp, err := c.GetDimensionV2DimidValue(ctx, dimid, value, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDimensionV2DimidValueResponse(rsp)
}

// GetEmployeeV2WithResponse request returning *GetEmployeeV2Response
func (c *ClientWithResponses) GetEmployeeV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEmployeeV2Response, error) {
	rsp, err := c.GetEmployeeV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeV2Response(rsp)
}

// PostEmployeeV2WithBodyWithResponse request with arbitrary body returning *PostEmployeeV2Response
func (c *ClientWithResponses) PostEmployeeV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeV2Response, error) {
	rsp, err := c.PostEmployeeV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeeV2Response(rsp)
}

func (c *ClientWithResponses) PostEmployeeV2WithResponse(ctx context.Context, body PostEmployeeV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeeV2Response, error) {
	rsp, err := c.PostEmployeeV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeeV2Response(rsp)
}

// GetEmployeeV2EmpIdWithResponse request returning *GetEmployeeV2EmpIdResponse
func (c *ClientWithResponses) GetEmployeeV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetEmployeeV2EmpIdResponse, error) {
	rsp, err := c.GetEmployeeV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmployeeV2EmpIdResponse(rsp)
}

// PostEmployeeV2EmpIdWithBodyWithResponse request with arbitrary body returning *PostEmployeeV2EmpIdResponse
func (c *ClientWithResponses) PostEmployeeV2EmpIdWithBodyWithResponse(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmployeeV2EmpIdResponse, error) {
	rsp, err := c.PostEmployeeV2EmpIdWithBody(ctx, empId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeeV2EmpIdResponse(rsp)
}

func (c *ClientWithResponses) PostEmployeeV2EmpIdWithResponse(ctx context.Context, empId int, body PostEmployeeV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmployeeV2EmpIdResponse, error) {
	rsp, err := c.PostEmployeeV2EmpId(ctx, empId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmployeeV2EmpIdResponse(rsp)
}

// GetEmploymentV2EmpIdWithResponse request returning *GetEmploymentV2EmpIdResponse
func (c *ClientWithResponses) GetEmploymentV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetEmploymentV2EmpIdResponse, error) {
	rsp, err := c.GetEmploymentV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEmploymentV2EmpIdResponse(rsp)
}

// PostEmploymentV2EmpIdWithBodyWithResponse request with arbitrary body returning *PostEmploymentV2EmpIdResponse
func (c *ClientWithResponses) PostEmploymentV2EmpIdWithBodyWithResponse(ctx context.Context, empId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEmploymentV2EmpIdResponse, error) {
	rsp, err := c.PostEmploymentV2EmpIdWithBody(ctx, empId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmploymentV2EmpIdResponse(rsp)
}

func (c *ClientWithResponses) PostEmploymentV2EmpIdWithResponse(ctx context.Context, empId int, body PostEmploymentV2EmpIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEmploymentV2EmpIdResponse, error) {
	rsp, err := c.PostEmploymentV2EmpId(ctx, empId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEmploymentV2EmpIdResponse(rsp)
}

// GetOrganizationV2WithResponse request returning *GetOrganizationV2Response
func (c *ClientWithResponses) GetOrganizationV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationV2Response, error) {
	rsp, err := c.GetOrganizationV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationV2Response(rsp)
}

// PostOrganizationV2WithBodyWithResponse request with arbitrary body returning *PostOrganizationV2Response
func (c *ClientWithResponses) PostOrganizationV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationV2Response, error) {
	rsp, err := c.PostOrganizationV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationV2Response(rsp)
}

// GetPayrollrunV2WithResponse request returning *GetPayrollrunV2Response
func (c *ClientWithResponses) GetPayrollrunV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPayrollrunV2Response, error) {
	rsp, err := c.GetPayrollrunV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayrollrunV2Response(rsp)
}

// GetPayrollrunV2PayrollrunIdWithResponse request returning *GetPayrollrunV2PayrollrunIdResponse
func (c *ClientWithResponses) GetPayrollrunV2PayrollrunIdWithResponse(ctx context.Context, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayrollrunV2PayrollrunIdResponse, error) {
	rsp, err := c.GetPayrollrunV2PayrollrunId(ctx, payrollrunId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayrollrunV2PayrollrunIdResponse(rsp)
}

// GetPayslipV2EmpIdWithResponse request returning *GetPayslipV2EmpIdResponse
func (c *ClientWithResponses) GetPayslipV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipV2EmpIdResponse, error) {
	rsp, err := c.GetPayslipV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayslipV2EmpIdResponse(rsp)
}

// GetPayslipV2EmpIdPayrollrunIdWithResponse request returning *GetPayslipV2EmpIdPayrollrunIdResponse
func (c *ClientWithResponses) GetPayslipV2EmpIdPayrollrunIdWithResponse(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayslipV2EmpIdPayrollrunIdResponse, error) {
	rsp, err := c.GetPayslipV2EmpIdPayrollrunId(ctx, empId, payrollrunId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayslipV2EmpIdPayrollrunIdResponse(rsp)
}

// GetPayslipJSONV2EmpIdWithResponse request returning *GetPayslipJSONV2EmpIdResponse
func (c *ClientWithResponses) GetPayslipJSONV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipJSONV2EmpIdResponse, error) {
	rsp, err := c.GetPayslipJSONV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayslipJSONV2EmpIdResponse(rsp)
}

// GetPayslipJSONV2EmpIdPayrollrunIdWithResponse request returning *GetPayslipJSONV2EmpIdPayrollrunIdResponse
func (c *ClientWithResponses) GetPayslipJSONV2EmpIdPayrollrunIdWithResponse(ctx context.Context, empId int, payrollrunId int, reqEditors ...RequestEditorFn) (*GetPayslipJSONV2EmpIdPayrollrunIdResponse, error) {
	rsp, err := c.GetPayslipJSONV2EmpIdPayrollrunId(ctx, empId, payrollrunId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayslipJSONV2EmpIdPayrollrunIdResponse(rsp)
}

// GetPayslipsV2EmpIdWithResponse request returning *GetPayslipsV2EmpIdResponse
func (c *ClientWithResponses) GetPayslipsV2EmpIdWithResponse(ctx context.Context, empId int, reqEditors ...RequestEditorFn) (*GetPayslipsV2EmpIdResponse, error) {
	rsp, err := c.GetPayslipsV2EmpId(ctx, empId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayslipsV2EmpIdResponse(rsp)
}

// GetTransactionV2WithResponse request returning *GetTransactionV2Response
func (c *ClientWithResponses) GetTransactionV2WithResponse(ctx context.Context, params *GetTransactionV2Params, reqEditors ...RequestEditorFn) (*GetTransactionV2Response, error) {
	rsp, err := c.GetTransactionV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionV2Response(rsp)
}

// PostTransactionV2WithBodyWithResponse request with arbitrary body returning *PostTransactionV2Response
func (c *ClientWithResponses) PostTransactionV2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionV2Response, error) {
	rsp, err := c.PostTransactionV2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionV2Response(rsp)
}

func (c *ClientWithResponses) PostTransactionV2WithResponse(ctx context.Context, body PostTransactionV2JSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionV2Response, error) {
	rsp, err := c.PostTransactionV2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionV2Response(rsp)
}

// GetWagetypesV2WithResponse request returning *GetWagetypesV2Response
func (c *ClientWithResponses) GetWagetypesV2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWagetypesV2Response, error) {
	rsp, err := c.GetWagetypesV2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWagetypesV2Response(rsp)
}

// GetWagetypesV2PayrollcodeWithResponse request returning *GetWagetypesV2PayrollcodeResponse
func (c *ClientWithResponses) GetWagetypesV2PayrollcodeWithResponse(ctx context.Context, payrollcode int, reqEditors ...RequestEditorFn) (*GetWagetypesV2PayrollcodeResponse, error) {
	rsp, err := c.GetWagetypesV2Payrollcode(ctx, payrollcode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWagetypesV2PayrollcodeResponse(rsp)
}

// ParseGetAbsenceV2Response parses an HTTP response from a GetAbsenceV2WithResponse call
func ParseGetAbsenceV2Response(rsp *http.Response) (*GetAbsenceV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsenceV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbsenceDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAbsenceV2Response parses an HTTP response from a PostAbsenceV2WithResponse call
func ParsePostAbsenceV2Response(rsp *http.Response) (*PostAbsenceV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAbsenceV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAbsenceV2EmpIdResponse parses an HTTP response from a GetAbsenceV2EmpIdWithResponse call
func ParseGetAbsenceV2EmpIdResponse(rsp *http.Response) (*GetAbsenceV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsenceV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbsenceDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAbsencetypesV2Response parses an HTTP response from a GetAbsencetypesV2WithResponse call
func ParseGetAbsencetypesV2Response(rsp *http.Response) (*GetAbsencetypesV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsencetypesV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbsenceTypeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAbsencetypesV2CodeResponse parses an HTTP response from a GetAbsencetypesV2CodeWithResponse call
func ParseGetAbsencetypesV2CodeResponse(rsp *http.Response) (*GetAbsencetypesV2CodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAbsencetypesV2CodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbsenceTypeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAuthResponse parses an HTTP response from a GetAuthWithResponse call
func ParseGetAuthResponse(rsp *http.Response) (*GetAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostChildV2Response parses an HTTP response from a PostChildV2WithResponse call
func ParsePostChildV2Response(rsp *http.Response) (*PostChildV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChildV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetChildV2EmpIdResponse parses an HTTP response from a GetChildV2EmpIdWithResponse call
func ParseGetChildV2EmpIdResponse(rsp *http.Response) (*GetChildV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChildV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChildDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetDimensionV2Response parses an HTTP response from a GetDimensionV2WithResponse call
func ParseGetDimensionV2Response(rsp *http.Response) (*GetDimensionV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDimensionV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DimensionInfoDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDimensionV2DimidResponse parses an HTTP response from a GetDimensionV2DimidWithResponse call
func ParseGetDimensionV2DimidResponse(rsp *http.Response) (*GetDimensionV2DimidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDimensionV2DimidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DimensionValueDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDimensionV2DimidResponse parses an HTTP response from a PostDimensionV2DimidWithResponse call
func ParsePostDimensionV2DimidResponse(rsp *http.Response) (*PostDimensionV2DimidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDimensionV2DimidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDimensionV2DimidValueResponse parses an HTTP response from a GetDimensionV2DimidValueWithResponse call
func ParseGetDimensionV2DimidValueResponse(rsp *http.Response) (*GetDimensionV2DimidValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDimensionV2DimidValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []DimensionValueDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEmployeeV2Response parses an HTTP response from a GetEmployeeV2WithResponse call
func ParseGetEmployeeV2Response(rsp *http.Response) (*GetEmployeeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmployeeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParsePostEmployeeV2Response parses an HTTP response from a PostEmployeeV2WithResponse call
func ParsePostEmployeeV2Response(rsp *http.Response) (*PostEmployeeV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeeV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEmployeeV2EmpIdResponse parses an HTTP response from a GetEmployeeV2EmpIdWithResponse call
func ParseGetEmployeeV2EmpIdResponse(rsp *http.Response) (*GetEmployeeV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmployeeV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmployeeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParsePostEmployeeV2EmpIdResponse parses an HTTP response from a PostEmployeeV2EmpIdWithResponse call
func ParsePostEmployeeV2EmpIdResponse(rsp *http.Response) (*PostEmployeeV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmployeeV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEmploymentV2EmpIdResponse parses an HTTP response from a GetEmploymentV2EmpIdWithResponse call
func ParseGetEmploymentV2EmpIdResponse(rsp *http.Response) (*GetEmploymentV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEmploymentV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmploymentDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEmploymentV2EmpIdResponse parses an HTTP response from a PostEmploymentV2EmpIdWithResponse call
func ParsePostEmploymentV2EmpIdResponse(rsp *http.Response) (*PostEmploymentV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEmploymentV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationV2Response parses an HTTP response from a GetOrganizationV2WithResponse call
func ParseGetOrganizationV2Response(rsp *http.Response) (*GetOrganizationV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOrganizationV2Response parses an HTTP response from a PostOrganizationV2WithResponse call
func ParsePostOrganizationV2Response(rsp *http.Response) (*PostOrganizationV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPayrollrunV2Response parses an HTTP response from a GetPayrollrunV2WithResponse call
func ParseGetPayrollrunV2Response(rsp *http.Response) (*GetPayrollrunV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayrollrunV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayrollRunDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPayrollrunV2PayrollrunIdResponse parses an HTTP response from a GetPayrollrunV2PayrollrunIdWithResponse call
func ParseGetPayrollrunV2PayrollrunIdResponse(rsp *http.Response) (*GetPayrollrunV2PayrollrunIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayrollrunV2PayrollrunIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayrollRunDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPayslipV2EmpIdResponse parses an HTTP response from a GetPayslipV2EmpIdWithResponse call
func ParseGetPayslipV2EmpIdResponse(rsp *http.Response) (*GetPayslipV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayslipV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPayslipV2EmpIdPayrollrunIdResponse parses an HTTP response from a GetPayslipV2EmpIdPayrollrunIdWithResponse call
func ParseGetPayslipV2EmpIdPayrollrunIdResponse(rsp *http.Response) (*GetPayslipV2EmpIdPayrollrunIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayslipV2EmpIdPayrollrunIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPayslipJSONV2EmpIdResponse parses an HTTP response from a GetPayslipJSONV2EmpIdWithResponse call
func ParseGetPayslipJSONV2EmpIdResponse(rsp *http.Response) (*GetPayslipJSONV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayslipJSONV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayslipJSONDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPayslipJSONV2EmpIdPayrollrunIdResponse parses an HTTP response from a GetPayslipJSONV2EmpIdPayrollrunIdWithResponse call
func ParseGetPayslipJSONV2EmpIdPayrollrunIdResponse(rsp *http.Response) (*GetPayslipJSONV2EmpIdPayrollrunIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayslipJSONV2EmpIdPayrollrunIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayslipJSONDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPayslipsV2EmpIdResponse parses an HTTP response from a GetPayslipsV2EmpIdWithResponse call
func ParseGetPayslipsV2EmpIdResponse(rsp *http.Response) (*GetPayslipsV2EmpIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayslipsV2EmpIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PayslipDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTransactionV2Response parses an HTTP response from a GetTransactionV2WithResponse call
func ParseGetTransactionV2Response(rsp *http.Response) (*GetTransactionV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TransactionDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParsePostTransactionV2Response parses an HTTP response from a PostTransactionV2WithResponse call
func ParsePostTransactionV2Response(rsp *http.Response) (*PostTransactionV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWagetypesV2Response parses an HTTP response from a GetWagetypesV2WithResponse call
func ParseGetWagetypesV2Response(rsp *http.Response) (*GetWagetypesV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWagetypesV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WageTypeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetWagetypesV2PayrollcodeResponse parses an HTTP response from a GetWagetypesV2PayrollcodeWithResponse call
func ParseGetWagetypesV2PayrollcodeResponse(rsp *http.Response) (*GetWagetypesV2PayrollcodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWagetypesV2PayrollcodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []WageTypeDTO
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (*/*) unsupported

	}

	return response, nil
}
